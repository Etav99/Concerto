@using Concerto.Shared.Client.Components.Dialogs
@using Concerto.Shared.Client.Extensions;
@using Concerto.Shared.Client.Services
@using Concerto.Shared.Models.Dto
@inherits MudComponentBase;

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IUserService UserService
@inject ISessionService SessionService
@inject HttpClient Http;

<MudTable T="SessionListItem" Items="Sessions" Hover="true" Outlined="true" Elevation="0" FixedHeader="true" FixedFooter="true"
		  Height="calc(100% - 64px)" Loading="@Loading" Class="@Class" Style="@Style" RowStyle="cursor: pointer;"
		  OnRowClick="OnRowClick">
	<ToolBarContent>
		<MudText Class="mr-2" Typo="Typo.h6">Sessions</MudText>
		<MudSpacer />
		<MudButtonGroup OverrideStyles="false">

			<MudIconButton DisableElevation="true" Icon="@Icons.Material.Filled.Refresh" Color="Color.Default" Variant="Variant.Filled" OnClick="Initialize" />
			<MudIconButton DisableElevation="true" Icon="@Icons.Material.Filled.AddBox" Color="Color.Default" Variant="Variant.Filled" OnClick="CreateSession" Disabled="false" />

			<MudMenu Dense="true">
				<ActivatorContent>
					<MudIconButton DisableElevation="true" Icon="@Icons.Material.Filled.MoreVert" Color="Color.Default" Variant="Variant.Filled" />
				</ActivatorContent>
				<ChildContent>
					<MudMenuItem IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.Refresh"
								 OnClick="Initialize" Disabled="false">
						Refresh view
					</MudMenuItem>
					<MudMenuItem IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.AddBox"
								 OnClick="CreateSession" Disabled="false">
						Create session
					</MudMenuItem>
				</ChildContent>
			</MudMenu>
		</MudButtonGroup>


	</ToolBarContent>
	<HeaderContent>
		<MudTh>Name</MudTh>
		<MudTh>Sheduled on</MudTh>
		<MudTh />
	</HeaderContent>
	<RowTemplate>
		<MudTd>@context.Name</MudTd>
		<MudTd>@context.ScheduledDate.ToLocalTime().ToString()</MudTd>
		<MudTd Style="text-align:right">
			<MudMenu Dense="true">
				<ActivatorContent>
					<MudIconButton DisableElevation="true" Icon="@Icons.Material.Filled.MoreVert" Color="Color.Default" Variant="Variant.Filled" />
				</ActivatorContent>
				<ChildContent>
					<MudMenuItem IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.OpenInBrowser" OnClick="() => SelectSession(context)">Open</MudMenuItem>
					<MudMenuItem IconSize="Size.Small" IconColor="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="() => DeleteSession(context)">Delete</MudMenuItem>
				</ChildContent>
			</MudMenu>
		</MudTd>
	</RowTemplate>
</MudTable>

@code
{
	[Parameter]
	public long CourseId { get; set; }

	[Parameter]
	public EventCallback<long> OnSessionSelected { get; set; }

	private IEnumerable<SessionListItem>? Sessions;
	bool Loading => Sessions is null;

	private async Task SelectSession(SessionListItem session)
	{
		await OnSessionSelected.InvokeAsync(session.Id);
	}

	private async Task OnRowClick(TableRowClickEventArgs<SessionListItem> tableClick)
	{
		await SelectSession(tableClick.Item);
	}

	private async Task Initialize()
	{
		Sessions = await SessionService.GetCourseSessionsAsync(CourseId);
	}

	protected override async Task OnParametersSetAsync()
	{
		await Initialize();
	}

	private async Task CreateSession()
	{
		var parameters = new DialogParameters { ["CourseId"] = CourseId };
		var result = await DialogService.Show<CreateSessionDialog>("Create new session", parameters).Result;
		if (result.Cancelled) return;
		await Initialize();
	}

	private async Task DeleteSession(SessionListItem session)
	{
		if (!await DialogService.ShowDeleteConfirmationDialog("Delete session", "session", session.Name, true)) return;
		try
		{
			await SessionService.DeleteSessionAsync(session.Id);
			Snackbar.Add($"Session {session.Name} deleted", Severity.Success);
			await Initialize();
		}
		catch
		{
			Snackbar.Add($"Failed to delete session {session.Name}.", Severity.Error);
		}
	}

}