@using Concerto.Shared.Client.Services
@using Concerto.Shared.Models.Dto
@using MudBlazor.Services;
@inject IUserService UserService
@inject ICourseService CourseService
@inject IBreakpointService BreakpointService

@if(Loading)
{
    <LoadingIndicator Color="Color.Primary" Size="Size.Large" />
}
else
{
    <MudPaper Elevation="0" Outlined="true" Class="pa-4">
        <MudStack Spacing="4">

            <MudStack Row="true">
                <MudText>User specific permissions</MudText>
                <MudTooltip Text="Those settings will override folder permissions for specified users" Arrow="true">
                    <MudIcon Icon="@Icons.Material.Filled.Info" />
                </MudTooltip>
            </MudStack>

            <MudAutocomplete Margin="Margin.Dense" Dense="true" T="User" Label="Add user" @ref="_addUserAutocomplete"
                         ValueChanged="@AddUser" SearchFunc="@SearchContacts" Variant="Variant.Outlined"
                         ShowProgressIndicator="true" ProgressIndicatorColor="@Color.Default"
                         ToStringFunc="@(u => u == null ? null : $"{u.FullName}")"
                         AdornmentIcon="@Icons.Material.Filled.PersonAdd" AdornmentColor="Color.Default" Adornment="Adornment.Start"
                         />
            <MudPaper Elevation="0">

                @if(UserFolderPermissions.Count > 0)
                {
                    <MudTable Comparer="comparer" Items="UserFolderPermissions" Hover="true" Breakpoint="Breakpoint.Sm">
					    <HeaderContent>
						    <MudTh></MudTh>
						    <MudTh>Name</MudTh>
						    <MudTh>Surname</MudTh>
						    <MudTh>Permission</MudTh>
                            <MudTh>Actions</MudTh>
					    </HeaderContent>
						
                        <ColGroup>
                            <col style="padding: 0; width:20px" />
                            <col />
                            <col />
                            <col style="min-width:215px" />
                            <col style="width: 104px" />
                        </ColGroup>


					    <RowTemplate>
                            <MudTd DataLabel="">
                                <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small"/>
                            </MudTd>
						    <MudTd DataLabel="Name">@context.User.FirstName</MudTd>
						    <MudTd DataLabel="Surname">@context.User.LastName</MudTd>
                            @{
                                var parentMatch = ParentUserFolderPermissions.FirstOrDefault(p => p.User.Id == context.User.Id);

                                <MudTd DataLabel="Role">
                                    <FolderPermissionPicker @bind-Value="context.Permission" Inherited="parentMatch?.Permission.Type" />
                                </MudTd>

                                <MudTd Style="text-align: left">

                                    <MudTooltip Text="Restore to default - permission will be the same as parent folder">
                                        <MudIconButton Class="ms-1" Disabled="@(parentMatch is null || context.Permission.Inherited)" OnClick="@(async () => RestoreInherited(context, parentMatch))" Icon="@Icons.Material.Filled.Restore" Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" />
							        </MudTooltip>

                                    <MudTooltip Text="Remove - folder's default permission will apply for removed user" Arrow="true">
                                        <MudIconButton Class="ms-1"  Disabled="@(parentMatch is not null)" OnClick="@(async () => RemoveUserPermission(context))" Icon="@Icons.Material.Filled.Close" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" />
                                    </MudTooltip>
								
                                </MudTd>
                            }

					    </RowTemplate>
				    </MudTable>
                }
            </MudPaper>

        </MudStack>
    </MudPaper>
}



@code {
    [Parameter]
    public HashSet<User> Users { get; set; } = null!;

    [Parameter]
    public HashSet<UserFolderPermission> UserFolderPermissions { get; set; } = null!;

    [Parameter]
    public HashSet<UserFolderPermission> ParentUserFolderPermissions { get; set; } = null!;

    [Parameter]
    public EventCallback<HashSet<UserFolderPermission>> UserFolderPermissionsChanged { get; set; }

    UserFolderPermissionIdEqualityComparer comparer = new();

    bool Loading => Users is null;

    private MudAutocomplete<User>? _addUserAutocomplete;

    private async Task<IEnumerable<User>> SearchContacts(string searchString)
    {
        if (Users is null) return Enumerable.Empty<User>();
        var notSelectedUsers = Users.Where(u => !UserFolderPermissions.Select(ufp => ufp.User).Contains(u));
        if (string.IsNullOrWhiteSpace(searchString)) return notSelectedUsers;
        return notSelectedUsers.Where(u => u.FullName.Contains(searchString, StringComparison.OrdinalIgnoreCase));
    }


    private void AddUser(User user)
    {
        UserFolderPermissions.Add(new UserFolderPermission
            (
                User: user,
                Permission: new FolderPermission(FolderPermissionType.Read, false)
            ));
        _addUserAutocomplete!.Reset();
        UserFolderPermissionsChanged.InvokeAsync(UserFolderPermissions);
    }

    private void RemoveUserPermission(UserFolderPermission userPermission)
    {
        UserFolderPermissions.Remove(userPermission);
        UserFolderPermissionsChanged.InvokeAsync(UserFolderPermissions);
    }

    private void RestoreInherited(UserFolderPermission userPermission, UserFolderPermission parentUserPermission)
    {
        userPermission.Permission = parentUserPermission.Permission with { Inherited = true };
        UserFolderPermissionsChanged.InvokeAsync(UserFolderPermissions);
    }
}