@using Concerto.Shared.Client
@using Concerto.Shared.Client.Components.Input
@using Concerto.Shared.Client.Services;
@using Concerto.Shared.Models.Dto
@inject IDialogService DialogService
@inject ICourseService CourseService
@inject ISnackbar Snackbar
@inject HttpClient Http

<MudDialog>
    <DialogContent>
        <MudStack Spacing="8">
            <MudTextField @bind-Value="_request.Name" T="string" Label="Course name"></MudTextField>
			
            <MudStack>
                <MudSwitch @bind-Checked="_request.CopyCourseUsers" Label="Copy course users" Color="Color.Success"></MudSwitch>
                <MudSwitch Class="ml-2" @bind-Checked="_request.CopyRoles" Label="With roles" Disabled="!_request.CopyCourseUsers" Color="Color.Success"></MudSwitch>
            </MudStack>
			
			<MudStack>
                <MudSwitch @bind-Checked="_request.CopyFolders" Label="Copy folders" Color="Color.Success"></MudSwitch>
                <MudSwitch Class="ml-2" @bind-Checked="_request.CopyFiles" Label="With files" Disabled="!_request.CopyFolders" Color="Color.Success"></MudSwitch>
                <MudSwitch Class="ml-2" @bind-Checked="_request.CopyFoldersPermissions" Label="With user permissions" Disabled="!(_request.CopyFolders && _request.CopyCourseUsers)" Color="Color.Success"></MudSwitch>
            </MudStack>

        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance Dialog { get; set; } = null!;

    [Parameter]
    public CourseListItem CourseToClone { get; set; } = null!;

    private HashSet<User> _members = new(new UserIdEqualityComparer());

    private CloneCourseRequest _request = null!;

    protected override void OnInitialized()
    {
        _request = new CloneCourseRequest()
            {
				CourseId = CourseToClone.Id,
                CopyCourseUsers = true,
                CopyRoles = true,
                CopyFolders = false,
                CopyFiles = false,
                CopyFoldersPermissions = false
            };
    }

    private async Task Submit()
    {
        if (String.IsNullOrEmpty(_request.Name))
        {
            Snackbar.Add("Course name cannot be empty", Severity.Error);
            return;
        }

        try
        {
            var clonedCourseId = await CourseService.CloneCourse(_request);
            Snackbar.Add($"Cloned course {CourseToClone.Name}.", Severity.Success);
            Dialog.Close(DialogResult.Ok(clonedCourseId));
        }
        catch
        {
            Snackbar.Add($"Failed to clone course {CourseToClone.Name}", Severity.Error);
            Dialog.Cancel();
        }
    }

    void Cancel() => Dialog.Cancel();
}