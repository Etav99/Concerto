@using Concerto.Shared.Client.Services
@using Concerto.Shared.Client.Components.Input
@using Concerto.Shared.Models.Dto
@inject IDialogService DialogService
@inject ICourseService CourseService
@inject ISnackbar Snackbar
@inject HttpClient Http

<MudDialog>
    <DialogContent>
        <MudStack Spacing="8">
            <MudTextField @bind-Value="_courseName" T="string" Label="Course name"></MudTextField>
            <CourseMemberPicker Class="flex-grow-1" @bind-SelectedUsers="_members" />
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance Dialog { get; set; } = null!;

    private string? _courseName;

    private HashSet<User> _members = new(new UserIdEqualityComparer());

    private async Task Submit()
    {
        if(String.IsNullOrEmpty(_courseName)){
            Snackbar.Add("Course name cannot be empty", Severity.Error);
            return;
        }

        // Move to course manager
        var request = new CreateCourseRequest {
            Name = _courseName,
            Members = _members.Select(m => new CourseUser(m.Id, CourseUserRole.Member)),
        };
		
        if (await CourseService.CreateCourse(request))
		{
			Snackbar.Add("Course created", Severity.Success);
			Dialog.Close(DialogResult.Ok(true));
		}
		else
		{
			Snackbar.Add("Failed to create course", Severity.Error);
		}
	}

    void Cancel() => Dialog.Cancel();
}