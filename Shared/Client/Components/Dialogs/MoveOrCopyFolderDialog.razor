@using Concerto.Shared.Client.Components.Input
@using Concerto.Shared.Client.Components.Lists
@using Concerto.Shared.Client.Services
@using Concerto.Shared.Models.Dto
@inject ICourseService CourseService
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject IStorageService StorageService
@inject ICourseService CourseService
@inject IDialogService DialogService
@inject IStorageService StorageService

<MudDialog>
	<DialogContent>
		@if (!Loading)
		{
			<MudStack Spacing="1" Style="height: 70vh;">
				<MudText>@($"{ActionString} {ItemsString}")</MudText>


				<MudStack Row="true" AlignItems="AlignItems.Center">
					<MudCheckBox @bind-Checked="ToAnotherCourse">To another course</MudCheckBox>
					@if (ToAnotherCourse)
					{
						<MudIcon Icon="@Icons.Filled.ArrowRight"/>
						<MudText>@_selectedCourse?.Name</MudText>
						<MudButton Color="Color.Info" OnClick="ChooseCourse">Change</MudButton>
					}
				</MudStack>




				<MudText>
					Choose folder 
				</MudText>
				<MudPaper Outlined="true" Elevation="0" Class="flex-grow-1">
					<FileManager Class="flex-grow-1" Height="100%" Style="height: calc(100% - 40px); min-width: 70%" 
					ChooseFolderMode="true" InitialFolderId="_selectedCourse.RootFolderId" OnSelected="Submit"
							 ChooseFolderString="@(Copy ? "Copy here" : "Move here")" ExcludeFromChoose="ExcludedFromChoose" />
				</MudPaper>
			</MudStack>
		}
	</DialogContent>

	<DialogActions>
		<MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="Cancel">Cancel</MudButton>
	</DialogActions>
</MudDialog>


@code {
	[CascadingParameter]
	MudDialogInstance Dialog { get; set; } = null!;

	[Parameter]
	public IEnumerable<FolderContentItem>? Items { get; set; }
	HashSet<long> ExcludedFromChoose = null!;

	[Parameter]
	public long FromFolderId { get; set; }

	[Parameter]
	public long InitialCourseId { get; set; }

	[Parameter]
	public bool Copy { get; set; } = false;


	private bool _toAnotherCourse = false;
	private bool ToAnotherCourse
	{
		get
		{
			return _toAnotherCourse;
		}
		set
		{
			if (value == false)
			{
				_toAnotherCourse = value;
				_selectedCourse = _initialCourse;
			}
			else
			{
				ChooseCourse().AndForget();
			}
		}
	}


	private Course _initialCourse = null!;
	private Course? _selectedCourse;

	bool _selectingCourse = false;

	bool Loading => Items is null || (_moveRequest is null && _copyRequest is null);
	string ItemsString => Items is null ? string.Empty : string.Join(", ", Items.Select(i => i.Name));
	string ActionString => Copy ? "Copying" : "Moving";

	// Form
	MoveFolderItemsRequest _moveRequest = null!;
	CopyFolderItemsRequest _copyRequest = null!;

	protected override void OnInitialized()
	{
		Dialog.Options.FullWidth = true;
		Dialog.Options.MaxWidth = MaxWidth.Large;
		Dialog.SetOptions(Dialog.Options);
	}

	protected override async Task OnInitializedAsync()
	{
		if (Items is null) return;
		_initialCourse = await CourseService.GetCourse(InitialCourseId);
		_selectedCourse = _initialCourse;

		var folderIds = Items.Where(item => item is FolderItem).Select(folder => folder.Id);
		var fileIds = Items.Where(item => item is FileItem).Select(file => file.Id);

		ExcludedFromChoose = folderIds.ToHashSet();
		ExcludedFromChoose.Add(FromFolderId);

		_copyRequest = new CopyFolderItemsRequest()
			{
				FolderIds = folderIds,
				FileIds = fileIds,
				DestinationFolderId = FromFolderId
			};

		_moveRequest = new MoveFolderItemsRequest()
			{
				FolderIds = folderIds,
				FileIds = fileIds,
				DestinationFolderId = FromFolderId
			};
	}

	private async Task ChooseCourse()
	{
		var parameters = new DialogParameters { ["WithoutCourseIds"] = new List<long> { InitialCourseId } };
		var name = "Select course";
		var result = await DialogService.Show<SelectCourseDialog>(name, parameters).Result;
		if (result.Cancelled) return;
		var courseId = result.Data as long?;
		if (courseId is null) return;
		_toAnotherCourse = true;
		_selectedCourse = await CourseService.GetCourse(courseId.Value);
		_copyRequest.DestinationFolderId = _selectedCourse.RootFolderId;
		_moveRequest.DestinationFolderId = _selectedCourse.RootFolderId;
		StateHasChanged();
	}

	private async Task Submit(FolderItem destinationFolder)
	{
		_copyRequest.DestinationFolderId = destinationFolder.Id;
		_moveRequest.DestinationFolderId = destinationFolder.Id;
		try
		{
			if (Copy)
			{
				await StorageService.CopyFolderItems(_copyRequest);
			}
			else
			{
				await StorageService.MoveFolderItems(_moveRequest);
			}
			Snackbar.Add($"{(Copy ? "Copied" : "Moved")} succesfully", Severity.Success);
		}
		catch
		{
			Snackbar.Add($"Failed to {(Copy ? "copy" : "move")} items", Severity.Error);
		}
		Dialog.Close();
	}

	void Cancel() => Dialog.Cancel();
}