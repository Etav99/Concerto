@using Concerto.Shared.Models.Dto
@using Concerto.Shared.Client.Extensions
@using Concerto.Shared.Client.Services
@using Concerto.Shared.Client.Components.Lists
@inject ICourseService CourseService
@inject IUserService UserService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@if (Loading)
{
	<MudSkeleton Animation="Animation.Wave" SkeletonType="SkeletonType.Rectangle" Width="100%" Height="100%"></MudSkeleton>
}
else
{
	<MudStack Spacing="4" Class="pa-4" Style="height: 100%; overflow: auto">

		<MudStack Row="true" Style="background-color: var(--mud-palette-default)" Justify="Justify.SpaceBetween">
			<MudButtonGroup OverrideStyles="false">
				<MudButton OnClick="Discard" Disabled="!Changed" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Restore" Color="Color.Error">Discard</MudButton>
				<MudButton OnClick="Save" Disabled="!Changed" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Success">Save</MudButton>
			</MudButtonGroup>
			<MudButtonGroup OverrideStyles="false">
				<MudButton OnClick="Delete" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Delete Course</MudButton>
			</MudButtonGroup>
		</MudStack>


		<MudPaper Class="d-flex align-center pa-4" Elevation="0" Outlined="true">
			<MudIcon Class="mr-2" Icon="@Icons.Material.Filled.Person" Title="Role"/>
			<MudText>Your role in this course: @CourseSettings?.CurrentUserRole.ToDisplayString()</MudText>
		</MudPaper>

		<MudPaper Elevation="0">
			<MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.Title" Immediate="true" Variant="Variant.Outlined" @bind-Value="Request.Name" T="string" Label="Course name"></MudTextField>
		</MudPaper>

		<CourseMemberManager SelectedCourseUsers="Request.Members" SelectedCourseUsersChanged="() => StateHasChanged()"
		                     ExistingCourseUsers="ExistingCourseUsers"
		                     AvailableCourseUsers="AvailableCourseUsers"
		                     Users="Users"/>

	</MudStack>
}



@code {

	[Parameter]
	public long CourseId { get; set; }

	[Parameter]
	public EventCallback OnCourseDeleted { get; set; }

	[Parameter]
	public EventCallback OnCourseUpdated { get; set; }


	CourseSettings? CourseSettings { get; set; }

	// Form
	private UpdateCourseRequest Request { get; set; } = null!;


	bool Changed => Request.Name != CourseSettings!.Name || !ChangeDetectionSet.SetEquals(Request.Members);
	private HashSet<CourseUser> ChangeDetectionSet { get; set; } = null!;
	private HashSet<CourseUser> ExistingCourseUsers { get; set; } = null!;

	private Dictionary<long, User> Users { get; set; } = new();
	private HashSet<CourseUser> AvailableCourseUsers { get; set; } = null!;


	bool Loading => CourseSettings is null || Request is null || ExistingCourseUsers is null;

	protected override async Task OnInitializedAsync()
	{
		await Initialize();
	}

	protected override async Task OnParametersSetAsync()
	{
		if (CourseSettings is null || CourseSettings.Id != CourseId)
		{
			await Initialize();
		}
	}

	private async Task Initialize()
	{
		CourseSettings = null;
		CourseSettings = await CourseService.GetCourseSettingsAsync(CourseId);

		var users = await UserService.GetUsersAsync();
		Users = users.ToDictionary(u => u.Id);
		var _allCourseUsers = Users.Values.Select(u => new CourseUser(u.Id, CourseUserRole.Member)).ToHashSet();

		ChangeDetectionSet = CourseSettings.Members.ToHashSet();
		ExistingCourseUsers = CourseSettings.Members.ToHashSet(new CourseUserIdEqualityComparer());

		var _initialSelectedUsers = ExistingCourseUsers.Select(cu => cu with { }).ToHashSet(new CourseUserIdEqualityComparer());
		AvailableCourseUsers = _initialSelectedUsers.ToHashSet(new CourseUserIdEqualityComparer());
		AvailableCourseUsers.UnionWith(_allCourseUsers);

		Request = new UpdateCourseRequest
		{
			CourseId = CourseSettings.Id,
			Name = CourseSettings.Name,
			Description = CourseSettings.Description,
			Members = _initialSelectedUsers
		};
	}

	private async Task Discard()
	{
		await Initialize();
	}

	private async Task Save()
	{
		CourseSettings = null;
		try
		{
			await CourseService.UpdateCourseAsync(Request);
			Snackbar.Add("Course updated", Severity.Success);
			OnCourseUpdated.InvokeAsync().AndForget();
		}
		catch
		{
			Snackbar.Add("Failed to update course", Severity.Error);
		}
		await Initialize();
	}

	private async Task Delete()
	{
		if (!await DialogService.ShowDeleteConfirmationDialog("Delete course", "course", CourseSettings!.Name, true)) return;
		try
		{
			await CourseService.DeleteCourseAsync(CourseSettings.Id);
			Snackbar.Add($"{CourseSettings!.Name} deleted", Severity.Success);
			await OnCourseDeleted.InvokeAsync();
		}
		catch
		{
			Snackbar.Add($"Failed to delete course {CourseSettings!.Name}.", Severity.Error);
		}
	}

}