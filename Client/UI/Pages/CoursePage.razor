@attribute [Authorize]
@page "/courses/{SelectedCourseId:long}"

@inject NavigationManager NavigationManager
@inject ICourseService CourseService;
@inject ISnackbar Snackbar;
@inject IBreadcrumbsService BreadcrumbsService;

<PageTitle>Course</PageTitle>

@if (Loading)
{
    <MudSkeleton Animation="Animation.Wave" SkeletonType="SkeletonType.Rectangle" Width="100%" Height="100%"></MudSkeleton>
}
else
{
    <MudTabs @ref="_tabs" Outlined="true" Position="Position.Top" HeaderPosition="TabHeaderPosition.Before"
         ApplyEffectsToContainer="true" Class="" PanelClass="panel-height-maximum" Style="height: calc(100%);">


        <Header>
            <MudLink Class="mud-tab px-1"
                 Color="Color.Default" Underline="Underline.None" OnClick="@(() => NavigationManager.NavigateTo("courses"))">
                <MudIcon Class="text-icon" Size="Size.Small" Icon="@Icons.Material.Filled.ArrowBack" />
            </MudLink>
        </Header>

        <ChildContent>
            <MudTabPanel Text="Content">
                <FileManager InitialFolderId="SelectedCourse!.RootFolderId"
                         Class="flex-grow-1" Style="height: 100%;" Elevation="0" />
            </MudTabPanel>

            <MudTabPanel Text="Sessions">
                <CourseSessionList Style="flex: 1 1 auto; height: 100%; width: 100%;" Class="flex-shrink-1 pa-2" CourseId="SelectedCourseId" OnSessionSelected="OnSessionSelected" />
            </MudTabPanel>

            <MudTabPanel Text="Forum">
                <Forum CourseId="SelectedCourseId" Title="Course forum" />
            </MudTabPanel>

            @if (SelectedCourse!.CanManage)
            {
                <MudTabPanel Text="Settings">
                    <CourseSettingsManager CourseId="SelectedCourseId" OnCourseDeleted="OnCourseDeleted" OnCourseUpdated="OnCourseUpdated" />
                </MudTabPanel>
            }
        </ChildContent>


    </MudTabs>
}


@code {

    [Parameter]
    public long SelectedCourseId { get; set; }

    private Course? SelectedCourse { get; set; }

    MudTabs? _tabs;


    bool _loading;
    private bool Loading => _loading || SelectedCourse is null;


    protected override async Task OnParametersSetAsync()
    {
        if (SelectedCourse is not null && SelectedCourse.Id == SelectedCourseId) return;
        _loading = true;
        try
        {
            SelectedCourse = await CourseService.GetCourseAsync(SelectedCourseId);
        }
        catch (CourseException)
        {
            Snackbar.Add("Course does not exist or you don't have access", Severity.Error);
            NavigationManager.NavigateTo("courses");
        }
        _loading = false;
        if (SelectedCourse != null)
            BreadcrumbsService.Set(
                Icons.Material.Filled.MenuBook,
                SelectedCourse?.Name ?? string.Empty,
                new BreadcrumbItem("Courses", "courses"),
                new BreadcrumbItem(SelectedCourse?.Name, null, true)
                );
    }

    private void OnSessionSelected(long sessionId)
    {
        NavigationManager.NavigateTo($"courses/{SelectedCourseId}/sessions/{sessionId}");
    }

    private void OnCourseDeleted()
    {
        NavigationManager.NavigateTo("courses");
    }

    private async void OnCourseUpdated()
    {
        await OnParametersSetAsync();
        CourseService.GetCurrentUserCoursesAsync().AndForget();
    }

}