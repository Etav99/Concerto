@attribute [Authorize]
@page "/sessions/{SelectedSessionId:long}"

@using Concerto.Client.Components
@using Concerto.Client.Components.Lists
@using Concerto.Client.Services
@using Concerto.Shared.Extensions

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net

@inject NavigationManager NavigationManager
@inject IBreadcrumbsService BreadcrumbsService;
@inject ISessionClient SessionClient;
@inject IJSRuntime JsRuntime
<PageTitle>@($"Session - {SelectedSession?.Name}")</PageTitle>


<MudStack Row="true" Class="" Justify="Justify.Center" Style="height: calc(100%);">

	<MudPaper id="jitsi" Class="flex-grow-1 pa-2" MaxHeight="100%" Elevation="0" Outlined="true" />

	<MudStack Style="height: 100%;" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Stretch">
		@if (SelectedSession is not null && SelectedSession.CourseRootFolderId is not null)
		{
			<FileManager InitialFolderId="SelectedSession.CourseRootFolderId.Value" Style="flex: 1 1 auto; height: 20%" Height="100%" />
			<MudPaper Class="" Style="flex: 1 1 auto; height: 20%" Outlined="true">
					<ChatBox SelectedConversationId="SelectedSession?.ConversationId" />
			</MudPaper>
		}
	</MudStack>
</MudStack>

	@code {
	[Parameter]
	public long SelectedSessionId { get; set; }

	private Dto.Session? SelectedSession { get; set; }

	bool openEnd = false;
	void ToggleEndDrawer()
	{
		openEnd = !openEnd;
	}

	protected override async Task OnInitializedAsync() {
		SelectedSession = await SessionClient.GetSessionAsync(SelectedSessionId);
		if (SelectedSession == null)
		{
			NavigationManager.NavigateTo("courses");
			return;
		}

		BreadcrumbsService.Set(
			new BreadcrumbItem("Courses", "/courses"),
			new BreadcrumbItem(SelectedSession.CourseName, $"courses/{SelectedSession.CourseId}"),
			new BreadcrumbItem(SelectedSession.Name, null, true)
		);

		var meetingName = WebUtility.UrlEncode($"{SelectedSession?.Name} ({SelectedSession?.MeetingGuid.ToString()})");
		await JsRuntime.InvokeAsync<string>("startMeeting", "jitsi", $"Concerto/{meetingName})");
	}
}