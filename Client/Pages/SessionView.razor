@attribute [Authorize]
@page "/sessions/{SelectedSessionId:long}"

@using Concerto.Client.Components
@using Concerto.Client.Components.Lists
@using Concerto.Client.Services
@using Concerto.Shared.Extensions

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net

@inject NavigationManager NavigationManager
@inject ISessionClient SessionClient;
@inject IJSRuntime JsRuntime
<PageTitle>@($"Session - {SelectedSession?.Name}")</PageTitle>

<MudPaper Class="d-flex flex-column" Height="100%" Elevation="4">

	<MudPaper Class="pa-2 mud-theme-primary" Square="false" Elevation="0">
		<MudStack Row="true" Justify="Justify.Center">
			<MudIcon Icon="@Icons.Material.Filled.Group" />
			<MudText Align="Align.Center">@($"{SelectedSession?.Name}")</MudText>
		</MudStack>
	</MudPaper>

	<MudStack Row="true" Class="d-flex ma-4" Justify="Justify.Center" Style="height:calc(100% - 65px);">

		<MudPaper id="jitsi" Class="flex-grow-1 pa-2" MaxHeight="100%" Elevation="0" Outlined="true" />


			<MudStack Class="" Style="height:calc(100%);" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Stretch">

				<MudPaper Class="d-flex" Style="flex: 1 1 auto; height: 20%" Outlined="true">
						<FolderList Style="d-flex" Type="FolderList.ListType.Session" Session="SelectedSession" />
				</MudPaper>

				<MudPaper Class="" Style="flex: 1 1 auto; height: 20%" Outlined="true">
					<ChatBox SelectedConversation="SelectedSession?.Conversation" />
				</MudPaper>

		</MudStack>

	</MudStack>
</MudPaper>

	@code {
	[Parameter]
	public long SelectedSessionId { get; set; }

	private Dto.Session? SelectedSession { get; set; }


	protected override async Task OnInitializedAsync() {
		SelectedSession = await SessionClient.GetSessionAsync(SelectedSessionId);
		if (SelectedSession == null)
		{
			NavigationManager.NavigateTo("courses");
			return;
		}
		var meetingName = WebUtility.UrlEncode($"{SelectedSession?.Name} ({SelectedSession?.MeetingGuid.ToString()})");
		await JsRuntime.InvokeAsync<string>("startMeeting", "jitsi", $"Concerto/{meetingName})");
	}
}