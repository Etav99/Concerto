@page "/contacts"
@using Concerto.Client.Services
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@inject HttpClient Http
@inject IChatService ChatService

<PageTitle>Contacts</PageTitle>

@if (loading)
{
	<MudPaper Class="d-flex align-content-center align-center" Width="100%" Height="100%" Elevation="0">
		<MudProgressCircular Class="ma-auto" Size="Size.Large" Color="Color.Default" Indeterminate="true" />
	</MudPaper>
}
else
{
	<MudTabs Elevation="4" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
		<MudTabPanel Text="Your contacts">
			<MudTable Items="contacts" Hover="true" SortLabel="Sort By" Elevation="0" Filter="new Func<Dto.User, bool>(UserFilter)" Class="pa-4">
				<ToolBarContent>
					<MudText Typo="Typo.h6">Contacts</MudText>
					<MudSpacer />
					<MudTextField @bind-Value="contactSearchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
				</ToolBarContent>
				<HeaderContent>
					<MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Dto.User, object>(x=>x.Username)">Username</MudTableSortLabel></MudTh>
					<MudTh><MudTableSortLabel SortBy="new Func<Dto.User, object>(x=>x.FirstName)">First name</MudTableSortLabel></MudTh>
					<MudTh><MudTableSortLabel SortBy="new Func<Dto.User, object>(x=>x.LastName)">Last name</MudTableSortLabel></MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTd DataLabel="Username">@context.Username</MudTd>
					<MudTd DataLabel="First name">@context.FirstName</MudTd>
					<MudTd DataLabel="Last name">@context.LastName</MudTd>
				</RowTemplate>
				<PagerContent>
					<MudTablePager PageSizeOptions="new int[]{50, 100}" />
				</PagerContent>
			</MudTable>
		</MudTabPanel>

		<MudTabPanel Text="Search contacts">
			<MudTable Items="searchResult" Hover="true" SortLabel="Sort By" Elevation="0" Class="pa-4">
				<ToolBarContent>
					<MudText Typo="Typo.h6">Search for users</MudText>
					<MudSpacer />
					<MudTextField ValueChanged="@((string s) => Search(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
				</ToolBarContent>
				<HeaderContent>
					<MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Dto.User, object>(x=>x.Username)">Username</MudTableSortLabel></MudTh>
					<MudTh><MudTableSortLabel SortBy="new Func<Dto.User, object>(x=>x.FirstName)">First name</MudTableSortLabel></MudTh>
					<MudTh><MudTableSortLabel SortBy="new Func<Dto.User, object>(x=>x.LastName)">Last name</MudTableSortLabel></MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTd DataLabel="Username">@context.Username</MudTd>
					<MudTd DataLabel="First name">@context.FirstName</MudTd>
					<MudTd DataLabel="Last name">@context.LastName</MudTd>
					<MudTd>
						<MudIconButton Icon="@Icons.Filled.PersonAdd" Color="Color.Primary" Variant="Variant.Outlined" OnClick="@(() => Invite(context))" />
					</MudTd>
				</RowTemplate>
				<PagerContent>
					<MudTablePager PageSizeOptions="new int[]{50, 100}" />
				</PagerContent>
			</MudTable>
		</MudTabPanel>

	</MudTabs>
}

@code
{
	private List<Dto.User> contacts = new List<Dto.User>();
	private List<Dto.User> searchResult = new List<Dto.User>();
	private bool loading = true;
	private string contactSearchString = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		loading = true;
		var contactsResponse = await Http.GetFromJsonAsync<Dto.User[]>("User/GetCurrentUserContacts");
		contacts = contactsResponse == null ? new List<Dto.User>()
											: contactsResponse.ToList();
		loading = false;
	}

	private bool UserFilter(Dto.User user)
	{
		if (string.IsNullOrWhiteSpace(contactSearchString))
			return true;
		if (user.Username.Contains(contactSearchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if ($"{user.FirstName} {user.LastName}".Contains(contactSearchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}

	private async Task Search(string userSearchString)
	{
		if (string.IsNullOrWhiteSpace(userSearchString))
			return;
		var searchResultResponse = await Http.GetFromJsonAsync<Dto.User[]>($"User/Search?searchString={userSearchString}");
		searchResult = searchResultResponse == null ? new List<Dto.User>()
													: searchResultResponse.ToList();
		StateHasChanged();
	}

	private async Task Invite(Dto.User user){
		
	}


}