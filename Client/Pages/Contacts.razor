@page "/contacts"
@using Concerto.Client.Chat
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@inject HttpClient Http
@inject IChatManager ChatManager

<PageTitle>Contacts</PageTitle>

@if (loading)
{
	<MudPaper Class="d-flex align-content-center align-center" Width="100%" Height="100%" Elevation="0">
		<MudProgressCircular Class="ma-auto" Size="Size.Large" Color="Color.Default" Indeterminate="true" />
	</MudPaper>
}
else
{
	@if (contacts == null)
	{
		<MudPaper Class="d-flex align-content-center align-center" Width="100%" Height="100%" Elevation="0">
			<MudProgressCircular Class="ma-auto" Size="Size.Large" Color="Color.Default" Indeterminate="true" />
		</MudPaper>
	}
	else
	{
		<MudStack Row="true" Justify="Justify.SpaceEvenly" Class="border-solid border-2 mud-border-primary pa-4 ma-2">
			<MudPaper Class="d-flex flex-wrap border-solid border-2 mud-border-primary pa-4 ma-2" Elevation="0">
				<MudTable Items="contacts" Hover="true" SortLabel="Sort By" Elevation="0" Filter="new Func<Dto.User, bool>(UserFilter)">
					<ToolBarContent>
						<MudText Typo="Typo.h6">Contacts</MudText>
						<MudSpacer />
						<MudTextField @bind-Value="contactSearchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
					</ToolBarContent>
					<HeaderContent>
						<MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Dto.User, object>(x=>x.Username)">Username</MudTableSortLabel></MudTh>
						<MudTh><MudTableSortLabel SortBy="new Func<Dto.User, object>(x=>x.FirstName)">First name</MudTableSortLabel></MudTh>
						<MudTh><MudTableSortLabel SortBy="new Func<Dto.User, object>(x=>x.LastName)">Last name</MudTableSortLabel></MudTh>
					</HeaderContent>
					<RowTemplate>
						<MudTd DataLabel="Username">@context.Username</MudTd>
						<MudTd DataLabel="First name">@context.FirstName</MudTd>
						<MudTd DataLabel="Last name">@context.LastName</MudTd>
					</RowTemplate>
					<PagerContent>
						<MudTablePager PageSizeOptions="new int[]{50, 100}" />
					</PagerContent>
				</MudTable>

			</MudPaper>
			<MudPaper Class="d-flex flex-wrap border-solid border-2 mud-border-primary pa-4 ma-2" Elevation="0">
				<MudTable Items="searchResult" Hover="true" SortLabel="Sort By" Elevation="0">
					<ToolBarContent>
						<MudText Typo="Typo.h6">Search for users</MudText>
						<MudSpacer />
						<MudTextField ValueChanged="@((string s) => Search(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
					</ToolBarContent>
					<HeaderContent>
						<MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Dto.User, object>(x=>x.Username)">Username</MudTableSortLabel></MudTh>
						<MudTh><MudTableSortLabel SortBy="new Func<Dto.User, object>(x=>x.FirstName)">First name</MudTableSortLabel></MudTh>
						<MudTh><MudTableSortLabel SortBy="new Func<Dto.User, object>(x=>x.LastName)">Last name</MudTableSortLabel></MudTh>
					</HeaderContent>
					<RowTemplate>
						<MudTd DataLabel="Username">@context.Username</MudTd>
						<MudTd DataLabel="First name">@context.FirstName</MudTd>
						<MudTd DataLabel="Last name">@context.LastName</MudTd>
						<MudTd>
							<MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="@(() => Invite(context))">Invite</MudButton>
						</MudTd>
					</RowTemplate>
					<PagerContent>
						<MudTablePager PageSizeOptions="new int[]{50, 100}" />
					</PagerContent>
				</MudTable>

			</MudPaper>
		</MudStack>

	}
}

@code
{
	private List<Dto.User> contacts = new List<Dto.User>();
	private List<Dto.User> searchResult = new List<Dto.User>();
	private bool loading = true;
	private string contactSearchString = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		loading = true;
		var contactsResponse = await Http.GetFromJsonAsync<Dto.User[]>("User/GetCurrentUserContacts");
		contacts = contactsResponse == null ? new List<Dto.User>()
											: contactsResponse.ToList();
		loading = false;
	}

	private bool UserFilter(Dto.User user)
	{
		if (string.IsNullOrWhiteSpace(contactSearchString))
			return true;
		if (user.Username.Contains(contactSearchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if ($"{user.FirstName} {user.LastName}".Contains(contactSearchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}

	private async Task Search(string userSearchString)
	{
		if (string.IsNullOrWhiteSpace(userSearchString))
			return;
		var searchResultResponse = await Http.GetFromJsonAsync<Dto.User[]>($"User/Search?searchString={userSearchString}");
		searchResult = searchResultResponse == null ? new List<Dto.User>()
													: searchResultResponse.ToList();
		StateHasChanged();
	}

	private async Task Invite(Dto.User user){
		
	}


}