@attribute [Authorize]
@page "/courses/{SelectedCourseId:long}"
@using Concerto.Client.Components.Views
@using Concerto.Client.Services
@using Concerto.Shared.Models.Dto
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Concerto.Client.Components.Lists

@inject NavigationManager NavigationManager
@inject HttpClient Http;
@inject ICourseService CourseService;
@inject IBreadcrumbsService BreadcrumbsService;
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Course</PageTitle>

@if (Loading)
{
	<MudSkeleton Animation="Animation.Wave" SkeletonType="SkeletonType.Rectangle" Width="100%" Height="100%"></MudSkeleton>
}
else
{
	<MudTabs @ref="_tabs" Outlined="true" Position="Position.Top"
	         ApplyEffectsToContainer="true" Class="" PanelClass="panel-height-maximum" Style="height: calc(100%);">

		<MudTabPanel Text="Content">
			<FileManager InitialFolderId="SelectedCourse!.RootFolderId"
				Class="flex-grow-1" Style="height: 100%;" Elevation="0" />
		</MudTabPanel>

		<MudTabPanel Text="Sessions">
			<CourseSessionList Style="flex: 1 1 auto; height: 100%; width: 100%;" Class="flex-shrink-1 pa-2" CourseId="SelectedCourseId" OnSessionSelected="OnSessionSelected"/>
		</MudTabPanel>

		<MudTabPanel Text="Forum">
			<Forum CourseId="SelectedCourseId" Title="Course forum"/>
		</MudTabPanel>

		@if (SelectedCourse!.CanManage)
		{
			<MudTabPanel Text="Settings">
				<CourseSettingsView CourseId="SelectedCourseId" OnCourseDeleted="OnCourseDeleted" OnCourseUpdated="OnCourseUpdated"/>
			</MudTabPanel>
		}

	</MudTabs>
}


@code {

	[Parameter]
	public long SelectedCourseId { get; set; }

	private Course? SelectedCourse { get; set; }

	MudTabs? _tabs;


	bool _loading;
	private bool Loading => _loading || SelectedCourse is null;


	protected override async Task OnParametersSetAsync()
	{
		if (SelectedCourse is not null && SelectedCourse.Id == SelectedCourseId) return;
		_loading = true;
		SelectedCourse = await CourseService.GetCourseAsync(SelectedCourseId);
		_loading = false;
		if (SelectedCourse == null) NavigationManager.NavigateTo("courses");
		BreadcrumbsService.Set(
			Icons.Material.Filled.MenuBook,
			SelectedCourse?.Name ?? string.Empty,
			new BreadcrumbItem("Courses", "courses"),
			new BreadcrumbItem(SelectedCourse?.Name, null, true)
			);
	}

	private void OnSessionSelected(long sessionId)
	{
		NavigationManager.NavigateTo($"courses/{SelectedCourseId}/sessions/{sessionId}");
	}

	private void OnCourseDeleted()
	{
		NavigationManager.NavigateTo("courses");
	}

	private async void OnCourseUpdated()
	{
		await OnParametersSetAsync();
		CourseService.GetCurrentUserCoursesAsync().AndForget();
	}

}