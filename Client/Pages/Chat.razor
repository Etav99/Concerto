@attribute [Authorize]
@page "/chat/{SelectedConversationId:long}"
@page "/chat"

@using Concerto.Client.Chat
@using Concerto.Client.Contacts
@using Concerto.Shared.Extensions

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IChatManager ChatManager
@inject IContactsManager ContactsManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Chat</PageTitle>

@if (loading)
{
	<MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
	<MudPaper Class="d-flex flex-wrap border-solid border-2 mud-border-primary pa-4 ma-2" Width="100%" Elevation="0">

		<MudPaper Class="d-flex justify-space-between flex-column flex-grow-1 ma-2 border-solid border-2 mud-border-primary pa-4" Width="50%" Elevation="0">

			<MudPaper Class="pa-2 mb-2 mud-theme-primary" Elevation="0">
				@if (CurrentConversation != null)
				{
					<MudText Align="Align.Center">@ConversationName</MudText>
				}

			</MudPaper>

			<MudPaper Class="d-flex flex-column-reverse mx-1" Elevation="0" Style="max-height:65vh;min-height:65vh; overflow:scroll;" id="messagesContainer">
				@if (ChatManager.Messages.ContainsKey(SelectedConversationId))
				{
					foreach (var message in ChatManager.Messages[SelectedConversationId])
					{
						if (message.SenderId == UserId || message.SenderId == 0)
						{
							<MudPaper Class="d-inline-flex mt-1 mx-2 justify-end ps-2" Elevation="0">
								<MudPaper Class="pa-2 mud-theme-secondary" Elevation="0">
									@message.Content
								</MudPaper>
							</MudPaper>
						}
						else
						{
							<MudPaper Class="d-inline-flex mt-1 mx-2 ps-2" Elevation="0">
								<MudPaper Class="pa-2 mud-theme-tertiary" Elevation="0">
									@message.Content
								</MudPaper>
							</MudPaper>
						}


					}
				}
			</MudPaper>

			<MudPaper Class="d-flex flex-row align-stretch pa-4 mx-4" Elevation="0">
				<MudTextField @bind-Value="MessageContent" Immediate="true" OnKeyPress="Enter" Label="Message" Variant="Variant.Filled">></MudTextField>
				<MudButton OnClick="Send" StartIcon="@Icons.Material.Filled.Send" Color="Color.Primary" ButtonType="ButtonType.Button">Send</MudButton>
			</MudPaper>

		</MudPaper>

		<MudPaper Class="flex-grow-0 border-solid border-2 mud-border-primary pa-4 ma-2" Elevation="0">
			
			<MudTable Items="ConversationsList" Hover="true" Elevation="0">
				<RowTemplate>
					<MudTd>@String.Join(',', context.Users.Select(u => $"{u.FirstName} {u.LastName}"))</MudTd>
					<MudTd>@(context.LastMessage?.Content ?? string.Empty)</MudTd>
					<MudTd Style="text-align:right">
						<MudFab OnClick="@(() => ChangeConversation(@context))" Color="Color.Primary" StartIcon="@Icons.Material.Filled.ChatBubble" />
					</MudTd>
				</RowTemplate>
				<PagerContent>
					<MudTablePager PageSizeOptions="new int[]{50, 100}" />
				</PagerContent>
			</MudTable>

		</MudPaper>

	</MudPaper>


}


@code {
	[Parameter]
	public long SelectedConversationId { get; set; } = 0;
	public string MessageContent { get; set; } = string.Empty;

	bool loading = true;

	private List<Dto.Conversation> ConversationsList {
		get
		{
			return ChatManager.Conversations.Values.ToList();
		}
	}
	private Dto.Conversation? CurrentConversation { get; set; }
	private string ConversationName { get; set; } = string.Empty;
	private long? UserId { get; set; }
	private AuthenticationState AuthenticationState { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var getAuthStateTask = AuthenticationStateProvider.GetAuthenticationStateAsync();
		loading = true;
		ChatManager.onMessageReceivedCallback = (message) => InvokeAsync(StateHasChanged);
		await ChatManager.LoadConversationsAsync();
		try
		{
			CurrentConversation = ChatManager.Conversations[SelectedConversationId];
			await ChatManager.LoadChatMessagesAsync(SelectedConversationId);
			GenerateConversationName();
		}
		catch (KeyNotFoundException)
		{
			if (ChatManager.Conversations.Any())
			{
				await ChangeConversation(ConversationsList.First());
			}
			else
			{
				CurrentConversation = null;
			}
		}
		loading = false;

		AuthenticationState = await getAuthStateTask;
		UserId = AuthenticationState.User.GetUserId();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await JsRuntime.InvokeAsync<string>("console.log", "onafterrender");
		await JsRuntime.InvokeAsync<string>("scrollToBottom", "messagesContainer");
	}

	private async Task Send()
	{
		if (ChatManager.IsConnected && !string.IsNullOrEmpty(MessageContent) && SelectedConversationId != 0)
		{
			Dto.ChatMessage message = new Dto.ChatMessage { ConversationId = CurrentConversation!.ConversationId, SendTimestamp = DateTime.UtcNow, Content = MessageContent };
			await ChatManager.SendChatMessageAsync(message);
			MessageContent = string.Empty;
			ShouldRender();
		}
	}

	private async Task Enter(KeyboardEventArgs e)
	{
		if (e.Code == "Enter" || e.Code == "NumpadEnter")
		{
			await Send();
		}
	}

	private async Task ChangeConversation(Dto.Conversation conversation)
	{
		CurrentConversation = conversation;
		SelectedConversationId = conversation.ConversationId;
		NavigationManager.NavigateTo($"chat/{conversation.ConversationId}");
		await ChatManager.LoadChatMessagesAsync(conversation.ConversationId);
		GenerateConversationName();
	}

	private void GenerateConversationName() {
		ConversationName = String.Join(',', CurrentConversation.Users.Select(u => $"{u.FirstName} {u.LastName}"));
	}

}