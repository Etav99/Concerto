@attribute [Authorize]
@page "/courses"

@using Concerto.Client.Components
@using Concerto.Client.Components.Dialogs
@using Concerto.Client.Services
@using Concerto.Shared.Extensions

@using Concerto.Shared.Models.Dto;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar

@inject IBreadcrumbsService BreadcrumbsService
@inject IChatService ChatService
@inject ICourseService CourseService


<PageTitle>Courses</PageTitle>

@if (Loading)
{
	<MudPaper Class="d-flex align-content-center align-center" Width="100%" Height="100%" Elevation="0">
		<MudProgressCircular Class="ma-auto" Size="Size.Large" Color="Color.Default" Indeterminate="true" />
	</MudPaper>
}
else
{
	<MudTable T="CourseListItem" Items="CoursesList" Hover="true"  Elevation="0" Filter="new Func<Dto.CourseListItem, bool>(CourseFilter)"
		    Style="height: 100%" Class="flex-grow-1" Height="calc(100% - 116px)" FixedHeader="true" FixedFooter="true" Outlined="true"
			RowsPerPage="25" OnRowClick="OnRowClick" RowStyle="cursor: pointer;">
			<ToolBarContent>
				<MudText Typo="Typo.h6">Your courses</MudText>
				<MudSpacer />
				<MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
				<MudSpacer />
				<AuthorizeView Roles="teacher">
					<MudIconButton Class="ml-2" DisableElevation="true" Size="Size.Large" Icon="@Icons.Material.Sharp.Add" Color="Color.Default" Variant="Variant.Filled" OnClick="CreateCourse" />
				</AuthorizeView>
			</ToolBarContent>
			<HeaderContent>
				<MudTh><MudTableSortLabel SortBy="new Func<CourseListItem, object>(x=> x.Name)">Course name</MudTableSortLabel></MudTh>
				<MudTh><MudTableSortLabel SortBy="new Func<CourseListItem, object>(x=> x.CreatedDate)" InitialDirection="SortDirection.Descending">Creation date</MudTableSortLabel></MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd>
					<MudText>@context.Name</MudText>
				</MudTd>
				<MudTd>
					<MudText>@context.CreatedDate</MudText>
				</MudTd>
				<MudTd Style="text-align:right">

					<MudMenu Dense="true">
						<ActivatorContent>
							<MudIconButton DisableElevation="true" Icon="@Icons.Material.Filled.MoreVert" Color="Color.Default" Variant="Variant.Filled"/>
						</ActivatorContent>
						<ChildContent>
							<MudMenuItem IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.OpenInBrowser" OnClick="() => SelectCourse(context)">Open</MudMenuItem>
							<MudMenuItem IconSize="Size.Small" IconColor="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="() => DeleteCourse(context)">Delete</MudMenuItem>
						</ChildContent>
					</MudMenu>
				</MudTd>
			</RowTemplate>
			<PagerContent>
				<MudTablePager PageSizeOptions="new int[]{25, 50, 100}" />
			</PagerContent>
	</MudTable>
}


@code {
	public string MessageContent { get; set; } = string.Empty;
	private string searchString = string.Empty;

	private bool Loading => CoursesList is null;

	private IEnumerable<CourseListItem>? CoursesList { get; set; }

	protected override void OnInitialized()
	{
		BreadcrumbsService.Set(
			Icons.Material.Filled.List,
			"Courses",
			new BreadcrumbItem("Courses", null, true)
		);
	}

	protected override async Task OnInitializedAsync()
	{
		CoursesList = await CourseService.GetUserCoursesList();
	}

	private void SelectCourse(CourseListItem course)
	{
		NavigationManager.NavigateTo($"courses/{course.Id}");
	}

	private async Task DeleteCourse(CourseListItem course)
	{
		var parameters = new DialogParameters { ["ItemName"] = $"course {course.Name}", ["Confirmation"] = true, };
		var name = "Delete course";
		var result = await DialogService.Show<DeleteConfirmationDialog>(name, parameters).Result;
		if ((bool)(result.Data ?? false))
		{
			try
			{
				await CourseService.DeleteCourse(course.Id);
				Snackbar.Add("Course deleted", Severity.Success);
				CoursesList = await CourseService.GetUserCoursesList();
			}
			catch
			{
				Snackbar.Add("Failed to delete course.", Severity.Error);
			}
		}
	}

	private void OnRowClick(TableRowClickEventArgs<CourseListItem> rowClick)
	{
		SelectCourse(rowClick.Item);
	}
	
	private async Task CreateCourse(MouseEventArgs mouseEventArgs){
		var result = await DialogService.Show<CreateCourseDialog>("Create new course").Result;
		if((bool)(result.Data ?? false))
		{
			CoursesList = await CourseService.GetUserCoursesList();
		}
	}

	private bool CourseFilter(Dto.CourseListItem course)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (course.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}

}