@page "/token"
@using Concerto.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http

@attribute [Authorize]

<PageTitle>Token debug info</PageTitle>

<p role="status">Profile Info</p>
<p>@authMessage</p>


@if (claims.Count() > 0)
{
	<h2>Claims:</h2>
	<ul>
		@foreach (var claim in claims)
		{
			<li>@claim.Type: @claim.Value</li>
		}
	</ul>
}

@code {
	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }
	private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
	private string authMessage;
	private string surnameMessage;
	private Dto.User? userData;

	protected override async Task OnInitializedAsync()
	{
		var authState = await authenticationStateTask;
		var user = authState.User;

		if (user.Identity.IsAuthenticated)
		{
			authMessage = $"{user.Identity.Name} is authenticated.";
			claims = user.Claims;
			surnameMessage =
				$"Surname: {user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";
		}
		else
		{
			authMessage = "The user is NOT authenticated.";
		}
	}
}