@inherits LayoutComponentBase

@using Concerto.Client.Services
@using Concerto.Client.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@inject IChatService ChatService
@inject IContactService ContactsManager
@inject IUserService UserService
@inject ISnackbar Snackbar

<MudThemeProvider @bind-IsDarkMode="@_darkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout Style="height:100vh;">
	<MudAppBar Elevation="0">
		<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
		<MudText Typo="Typo.h4">Concerto</MudText>
		<MudSpacer />
		<MudSwitch @bind-Checked="@_darkMode" ThumbIcon="@(_darkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)">Toggle theme</MudSwitch>
		<AuthorizeView>
			<Authorized>
				<MudText Class="mx-4">Welcome, @context.User.Identity.Name!</MudText>
				<MudStack Row="true">
					<MudButton Variant="Variant.Text" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Person" OnClick="BeginLogout">Log out</MudButton>
				</MudStack>
			</Authorized>
			<NotAuthorized>
				<MudText Class="mx-4">You're not logged in!</MudText>
				<MudStack Row="true">
					<MudButton Href="authentication/login" Variant="Variant.Text" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Login">Log in</MudButton>
					<MudButton Href="authentication/register" Variant="Variant.Text" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.AppRegistration">Register</MudButton>
				</MudStack>

			</NotAuthorized>
		</AuthorizeView>
	</MudAppBar>
	<MudDrawer @bind-Open="_drawerOpen" Elevation="1">
		<MudDrawerHeader>
			<MudText Typo="Typo.h6">Menu</MudText>
		</MudDrawerHeader>
		<NavMenu />
	</MudDrawer>
	<MudMainContent Style="height: 100%">
		<MudContainer MaxWidth="@(Navigation.Uri.Contains("session") ? MaxWidth.ExtraLarge : MaxWidth.Large)" Class="pa-16" Style="height: 100%;">
				@Body
			</MudContainer>
	</MudMainContent>
</MudLayout>

@code {
	[CascadingParameter]
	private Task<AuthenticationState>? authenticationStateTask { get; set; }

	bool _darkMode = false;
	bool _drawerOpen = true;

	void DrawerToggle()
	{
		_drawerOpen = !_drawerOpen;
	}

	private async Task BeginLogout(MouseEventArgs args)
	{
		await SignOutManager.SetSignOutState();
		Navigation.NavigateTo("authentication/logout");
	}

	private void LogIn()
	{
		Navigation.NavigateTo("authentication/login");
	}
	
	protected override async Task OnInitializedAsync()
	{
		if (authenticationStateTask == null) return;
		UserService.SetAuthenticationState(await authenticationStateTask);
		if (UserService.IsLoggedIn)
			await ChatService.ConnectToChatAsync();
	}
}