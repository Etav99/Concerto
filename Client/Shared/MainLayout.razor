@inherits LayoutComponentBase

@using Blazored.LocalStorage
@using Concerto.Client.Components
@using Concerto.Client.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@inject IBreadcrumbsService BreadcrumbsService
@inject IUserService UserService
@inject ISnackbar Snackbar
@inject ISyncLocalStorageService LocalStorage

<MudThemeProvider @bind-IsDarkMode="@DarkMode" />
<MudDialogProvider CloseOnEscapeKey="true" DisableBackdropClick="true" MaxWidth="MaxWidth.Large" CloseButton="true" />
<MudSnackbarProvider />
<CustomStyleProvider DarkMode="@DarkMode" />

<MudLayout Style="height:100vh;">
	<MudAppBar Elevation="0" Dense="true">
		<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
		<MudText Typo="Typo.h4">Concerto</MudText>
		<MudSpacer />
		<AuthorizeView>
			<Authorized>
				<MudMenu Dense="true" AnchorOrigin="Origin.BottomRight">
					<ActivatorContent>
						<MudButton>
							<ChildContent>
								<MudIcon Style="color: var(--mud-palette-appbar-text)" Icon="@Icons.Material.Sharp.Person" Size="Size.Large" />
								<MudIcon Style="color: var(--mud-palette-appbar-text)" Icon="@Icons.Material.Filled.ArrowDropDown" Size="Size.Large" />
							</ChildContent>
						</MudButton>
					</ActivatorContent>
					<ChildContent>
						<MudMenuItem Style="pointer-events: none;" Icon="@Icons.Material.Filled.PermIdentity">
							@context.User.Identity?.Name
						</MudMenuItem>
						<MudMenuItem Icon="@Icons.Material.Filled.ManageAccounts">
							<MudLink Color="Color.Default" Underline="Underline.None" Target="_blank" Href="http://localhost:7200/Concerto/Keycloak/realms/concerto/account/">
								<MudStack Row="true" Class="">
									<MudText Typo="Typo.body2">Manage account</MudText>
									<MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.OpenInNew" />
								</MudStack>
							</MudLink>
						</MudMenuItem>
						<MudMenuItem Icon="@(DarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)" OnClick="() => toggleDarkMode(!DarkMode)">Toggle theme</MudMenuItem>
						<MudMenuItem Icon="@Icons.Material.Filled.Logout" IconColor="Color.Error" OnClick="BeginLogout" >Log out</MudMenuItem>
					</ChildContent>
				</MudMenu>
			</Authorized>
			<NotAuthorized>
				<MudSwitch T="bool" Checked="@DarkMode" CheckedChanged="@(b => toggleDarkMode(b))" ThumbIconColor="Color.Dark" ThumbIcon="@(DarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)">Theme</MudSwitch>
				<MudStack Row="true">
					<MudButton Href="authentication/login" Variant="Variant.Text" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Login">Sign in</MudButton>
				</MudStack>
			</NotAuthorized>
		</AuthorizeView>
	</MudAppBar>
	<MudDrawer @bind-Open="_drawerOpen" Elevation="1">
		<MudDrawerHeader>
			<MudText Typo="Typo.h6">Menu</MudText>
		</MudDrawerHeader>
		<NavMenu />
	</MudDrawer>
	<MudMainContent Class="d-flex flex-column pb-2" Style="height: 100%">
		<NavigationToolbar />
		<MudContainer MaxWidth="@(Navigation.Uri.Contains("session") || Navigation.Uri.Contains("course") ? MaxWidth.ExtraLarge : MaxWidth.ExtraLarge)" Style="overflow:auto" Class="flex-grow-1">
			@Body
		</MudContainer>
	</MudMainContent>
</MudLayout>

@code {
	[CascadingParameter]
	private Task<AuthenticationState>? authenticationStateTask { get; set; }


	bool DarkMode { get; set; } = false;
	bool _drawerOpen = true;

	void DrawerToggle()
	{
		_drawerOpen = !_drawerOpen;
	}

	private async Task BeginLogout(MouseEventArgs args)
	{
		await SignOutManager.SetSignOutState();
		Navigation.NavigateTo("authentication/logout");
	}

	private void LogIn()
	{
		Navigation.NavigateTo("authentication/login");
	}

	private void toggleDarkMode(bool darkMode)
	{
		DarkMode = darkMode;
		LocalStorage.SetItem("darkMode", DarkMode);
	}

	protected override void OnInitialized()
	{
		if (LocalStorage.ContainKey("darkMode"))
		{
			DarkMode = LocalStorage.GetItem<bool>("darkMode");
		}
		else
		{
			LocalStorage.SetItem("darkMode", DarkMode);
		}
	}

	protected override async Task OnInitializedAsync()
	{
		if (authenticationStateTask == null) return;
		UserService.SetAuthenticationState(await authenticationStateTask);
		await UserService.FetchUserId();
	}
}