@using Concerto.Client.Services
@inject IRoomService RoomService
@inject ISnackbar Snackbar
@inject HttpClient Http

<MudDialog>
    <DialogContent>
        <MudTextField @bind-Value="_catalogName" T="string" Label="Name"></MudTextField>
        <MudAutocomplete T="Dto.Room" Label="Select room" @ref="_selectRoomAutocomplete"
                         ValueChanged="@OnRoomSelected" SearchFunc="@SearchRooms" Variant="Variant.Outlined"
						 ShowProgressIndicator="true" ProgressIndicatorColor="@Color.Default"
						 ToStringFunc="@(r => r == null ? null : $"{r.Name}")" />

        <MudAutocomplete T="Dto.Session" Label="Select session" @ref="_selectSessionAutocomplete"
						 ValueChanged="@AddSession" SearchFunc="@SearchSessions" Variant="Variant.Outlined"
						 ShowProgressIndicator="true" ProgressIndicatorColor="@Color.Default"
						 ToStringFunc="@(s => s == null ? null : $"{s.Name}")" />

		
					
        Catalog will be shared to sessions:
            <MudChipSet AllClosable="true" OnClose="Closed">
                @foreach (var session in _selectedSessions)
                {
                    <MudChip Value="@session" Text="@session.Name"></MudChip>
                }
            </MudChipSet>
    </DialogContent>
	
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Create</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter]
    MudDialogInstance Dialog { get; set; }

    [Parameter]
    public long? InitialSharedSessionId { get; set; }

    private string? _catalogName;
    private MudAutocomplete<Dto.Room>? _selectRoomAutocomplete;
    private Dto.Room? _selectedRoom;
    private MudAutocomplete<Dto.Session>? _selectSessionAutocomplete;
    private List<Dto.Session> _selectedSessions = new List<Dto.Session>();

    protected override async Task OnInitializedAsync()
    {
        if (!InitialSharedSessionId.HasValue) return;
        var session = await Http.GetFromJsonAsync<Dto.Session?>($"Session/GetSession?sessionId={InitialSharedSessionId.Value}");
        if(session == null) return;
        _selectedSessions.Add(session);
    }

    private async Task Submit()
    {
        if(String.IsNullOrEmpty(_catalogName)){
            Snackbar.Add("Catalog name cannot be empty", Severity.Error);
            return;
        }

        // Move to room manager
        var createSessionRequest = new Dto.CreateCatalogRequest {
                Name = _catalogName,
                SharedToSessionIds = _selectedSessions.Select(s => s.Id)
        };

        var response = await Http.PostAsJsonAsync("Storage/CreateCatalog", createSessionRequest);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Catalog created", Severity.Success);
            Dialog.Close(DialogResult.Ok(true));
        }
        else
        {
            Snackbar.Add("Failed to create catalog", Severity.Error);
        }
    }

    public void Closed(MudChip chip)
    {
        var session = chip.Value as Dto.Session;
        if (session is not null) _selectedSessions.Remove(session);
    }

    private void AddSession(Dto.Session session)
    {
        _selectedSessions.Add(session);
        _selectSessionAutocomplete?.Reset();
        _selectRoomAutocomplete?.Reset();
    }

    private async Task OnRoomSelected(Dto.Room room)
    {
        await RoomService.LoadRoomSessions(room.Id);
        _selectedRoom = room;
    }

    private async Task<IEnumerable<Dto.Room>> SearchRooms(string searchString)
    {
        await RoomService.LoadRoomsAsync();
        if (string.IsNullOrWhiteSpace(searchString))
            return RoomService.Rooms;
        return RoomService.Rooms.Where(c => (c.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)));
    }

    private async Task<IEnumerable<Dto.Session>> SearchSessions(string searchString)
    {

        if(_selectedRoom is null) return Enumerable.Empty<Dto.Session>();
        await RoomService.LoadRoomSessions(_selectedRoom.Id);
        if (string.IsNullOrWhiteSpace(searchString)){
			return RoomService.RoomSessions[_selectedRoom.Id].Where(s => !_selectedSessions.Any(s2 => s2.Id == s.Id));
        }
        return RoomService.RoomSessions[_selectedRoom.Id].Where(s => s.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) && !_selectedSessions.Contains(s));
    }

    void Cancel() => Dialog.Cancel();
}