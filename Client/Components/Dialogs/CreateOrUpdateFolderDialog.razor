@using Concerto.Client.Components.Pickers
@using Concerto.Client.Services
@using Concerto.Shared.Models.Dto
@inject ICourseService CourseService
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject IStorageService StorageService
@inject IStorageClient StorageClient
@inject ISessionClient SessionClient

<MudDialog>
	<DialogContent>
		@if (Loading) {
			<MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
		}
		else {
			<MudStack Spacing="4">
				<MudTextField @bind-Value="_folderName" T="string" Label="Folder name"></MudTextField>
				<FolderPermissionPicker @bind-FolderPermissionType="_folderCoursePermission.Type" />
				<UserFolderPermissionPicker @bind-UserFolderPermissions="_userPermissions" />
			</MudStack>
		}
	</DialogContent>
	<DialogActions>
		<MudButton OnClick="Cancel">Cancel</MudButton>
		<MudButton Color="Color.Primary" OnClick="Submit">
			@(EditedFolderId is null ? "Create" : "Update")
		</MudButton>
	</DialogActions>
</MudDialog>


@code {
	[CascadingParameter]
	MudDialogInstance Dialog { get; set; }

	[Parameter]
	public long? ParentId { get; set; }
	[Parameter]
	public long? EditedFolderId { get; set; }

	private bool Loading => _editedFolderSettings is null && EditedFolderId is not null;

	private FolderSettings? _editedFolderSettings { get; set; }

	// Form
	private string _folderName = string.Empty;
	private FolderPermission _folderCoursePermission = new FolderPermission { Type = FolderPermissionType.Read, Inherited = false };
	private ISet<UserFolderPermission> _userPermissions = new HashSet<UserFolderPermission>();
	

	protected override async Task OnInitializedAsync()
	{
		if (EditedFolderId.HasValue)
		{
			_editedFolderSettings = await StorageService.GetFolderSettings(EditedFolderId.Value);
			_folderName = _editedFolderSettings.Name;
			_userPermissions = _editedFolderSettings.UserPermissions.ToHashSet();
		}
		else if (!ParentId.HasValue)
		{
			throw new Exception("Argument error");
		}
	}

	private async Task Submit()
	{
		if (String.IsNullOrEmpty(_folderName))
		{
			Snackbar.Add("Folder name cannot be empty", Severity.Error);
			return;
		}

		if (_editedFolderSettings is null)
		{
			var request = new CreateFolderRequest
				{
					Name = _folderName,
					ParentId = ParentId!.Value,
					CoursePermission = _folderCoursePermission,
					UserPermissions = _userPermissions,
				};

			try
			{
				await StorageClient.CreateFolderAsync(request);
				Snackbar.Add("Folder created", Severity.Success);
				Dialog.Close(DialogResult.Ok(true));
			}
			catch
			{
				Snackbar.Add("Failed to create folder", Severity.Error);
			}

		}
		else
		{
			var request = new UpdateFolderRequest
				{
					Id = _editedFolderSettings.Id,
					Name = _folderName,
					CoursePermission = _folderCoursePermission,
					UserPermissions = _userPermissions,
				};

			try
			{
				await StorageClient.UpdateFolderAsync(request);
				Snackbar.Add("Folder updated", Severity.Success);
				Dialog.Close(DialogResult.Ok(true));
			}
			catch
			{
				Snackbar.Add("Failed to update folder", Severity.Error);
			}

		}
	}

	void Cancel() => Dialog.Cancel();
}