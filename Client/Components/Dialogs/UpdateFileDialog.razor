@using Concerto.Client.Components.Input
@using Concerto.Client.Services
@using Concerto.Shared.Models.Dto
@inject ICourseService CourseService
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject IStorageService StorageService
@inject ICourseService CourseService

<MudDialog>
	 <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Settings" Class="mr-3 mb-n1"/>
			Folder settings
        </MudText>
    </TitleContent>
	<DialogContent>
		@if (Loading)
		{
			<MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
		}
		else
		{
			<MudStack Spacing="4">
				<MudTextField @bind-Value="_request.Name" T="string" Label="File name"></MudTextField>
			</MudStack>
		}
	</DialogContent>
	<DialogActions>
		<MudButton OnClick="Cancel">Cancel</MudButton>
		<MudButton Color="Color.Primary" OnClick="Submit">Update</MudButton>
	</DialogActions>
</MudDialog>


@code {
	[CascadingParameter]
	MudDialogInstance Dialog { get; set; } = null!;

	[Parameter]
	public long EditedFileId { get; set; }

	private bool Loading => _request == null;

	private HashSet<User>? CourseUsers;

	private FileSettings _settings = null!;
	private UpdateFileRequest _request = null!;

	protected override async Task OnInitializedAsync()
	{
		_settings = await StorageService.GetFileSettings(EditedFileId);
		_request = new UpdateFileRequest()
			{
				FileId = _settings.Id,
				Name = _settings.Name,
			};
	}

	void Cancel() => Dialog.Cancel();

	private async Task Submit()
	{
		if (String.IsNullOrEmpty(_request.Name))
		{
			Snackbar.Add("File name cannot be empty", Severity.Error);
			return;
		}
		try
		{
			await StorageService.UpdateFile(_request);
			Snackbar.Add($"File {_settings.Name} updated", Severity.Success);
			Dialog.Close(DialogResult.Ok(true));
		}
		catch
		{
			Snackbar.Add($"Failed to update file {_settings.Name}", Severity.Error);
		}
	}

}