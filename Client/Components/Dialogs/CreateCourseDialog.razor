@using Concerto.Client.Services
@using Concerto.Shared.Models.Dto
@using Concerto.Client.Components.Input
@inject IDialogService DialogService
@inject ICourseService CourseService
@inject ISnackbar Snackbar
@inject HttpClient Http

@*<style>
	.mud-dialog.flex-dialog > div.outline-none
	{
		display: inherit;
		flex-direction: inherit;ont-size:28%;color:#3498db}
		flex-grow: 1;
	}
</style>*@


<MudDialog Class="" Style="max-height: 100vh; overflow:auto;" ContentStyle="" ClassContent="d-flex flex-column">
	<DialogContent>
		<MudTextField Class="mb-2" @bind-Value="_courseName" T="string" Label="Course name"></MudTextField>
		<CourseMemberPicker @bind-SelectedUsers="_members" Style="max-height:calc(100vh - 400px);"/>
	</DialogContent>
	<DialogActions>
		<MudButton OnClick="Cancel">Cancel</MudButton>
		<MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
	</DialogActions>
</MudDialog>


@code {

	[CascadingParameter]
	MudDialogInstance Dialog { get; set; } = null!;

	private string? _courseName;

	private HashSet<User> _members = new(new UserIdEqualityComparer());


	private async Task Submit()
	{
		if (string.IsNullOrEmpty(_courseName))
		{
			Snackbar.Add("Course name cannot be empty", Severity.Error);
			return;
		}

	// Move to course manager
		var request = new CreateCourseRequest
		{
			Name = _courseName,
			Members = _members.Select(m => new CourseUser(m.Id, CourseUserRole.Member))
		};

		try
		{
			var newCourseId = await CourseService.CreateCourseForCurrentUserAsync(request);
			Snackbar.Add("Course created", Severity.Success);
			Dialog.Close(DialogResult.Ok(newCourseId));
		}
		catch
		{
			Snackbar.Add("Failed to create course", Severity.Error);
		}
	}

	void Cancel()
	{
		Dialog.Cancel();
	}

}