@using Concerto.Client.Services
@using Concerto.Client.Components.Pickers
@using Concerto.Shared.Models.Dto;
@inject IDialogService DialogService
@inject IContactService ContactService
@inject ICourseService CourseService
@inject ISnackbar Snackbar
@inject HttpClient Http

<MudDialog>
    <DialogContent>
        <MudTextField @bind-Value="_courseName" T="string" Label="Name"></MudTextField>
        <CourseMemberPicker @bind-CourseUsers="_members" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance Dialog { get; set; } = null!;

    private string? _courseName;
	
    private ISet<CourseUser> _members = new HashSet<CourseUser>();

    private async Task Submit()
    {
        if(String.IsNullOrEmpty(_courseName)){
            Snackbar.Add("Course name cannot be empty", Severity.Error);
            return;
        }
        if(!_members.Any()) {
            Snackbar.Add("Members cannot be empty", Severity.Error);
            return;
        }
		
        // Move to course manager
		var request = new Dto.CreateCourseRequest {
			Name = _courseName,
            Members = _members
		};
		
        if (await CourseService.CreateCourse(request))
		{
			Snackbar.Add("Course created", Severity.Success);
			Dialog.Close(DialogResult.Ok(true));
		}
		else
		{
			Snackbar.Add("Failed to create course", Severity.Error);
		}
	}

    void Cancel() => Dialog.Cancel();
}