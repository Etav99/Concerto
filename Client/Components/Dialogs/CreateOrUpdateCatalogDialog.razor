@using Concerto.Client.Components.Pickers
@using Concerto.Client.Services
@inject IRoomService RoomService
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject IStorageService StorageService
@inject IStorageClient StorageClient
@inject ISessionClient SessionClient

<MudDialog>
	<DialogContent>
		@if (Loading) {
			<MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
		}
		else {
			<MudStack Spacing="4">
				<MudTextField @bind-Value="_catalogName" T="string" Label="Catalog name"></MudTextField>
				<SessionPicker @bind-SelectedSessions="_selectedSessions" Label="Catalog name"/>
				<ContactPicker @bind-SelectedContacts="_selectedContacts" Label="Catalog name" />
			</MudStack>
		}
	</DialogContent>
	<DialogActions>
		<MudButton OnClick="Cancel">Cancel</MudButton>
		<MudButton Color="Color.Primary" OnClick="Submit">
			@(EditedCatalogId is null ? "Create" : "Update")
		</MudButton>
	</DialogActions>
</MudDialog>


@code {
	[CascadingParameter]
	MudDialogInstance Dialog { get; set; }

	[Parameter]
	public long? InitialSharedSessionId { get; set; }

	[Parameter]
	public long? EditedCatalogId { get; set; }
	public Dto.CatalogSettings? EditedCatalog { get; set; }
	
	public bool Loading => EditedCatalog is null && EditedCatalogId is not null;

	private string? _catalogName;
	private ISet<Dto.Session> _selectedSessions = new HashSet<Dto.Session>();
	private ISet<Dto.User> _selectedContacts = new HashSet<Dto.User>();

	protected override async Task OnInitializedAsync()
	{
		if (EditedCatalogId.HasValue)
		{
			var catalog = await StorageService.GetCatalogSettings(EditedCatalogId.Value);
			EditedCatalog = catalog;
			_catalogName = catalog.Name;
			_selectedSessions = catalog.SessionShares.ToHashSet();
		}
		else if (InitialSharedSessionId.HasValue)
		{
			var session = await SessionClient.GetSessionAsync(InitialSharedSessionId.Value);
			if (session == null) return;
			_selectedSessions.Add(session);
		}
	}

	private async Task Submit()
	{
		if (String.IsNullOrEmpty(_catalogName))
		{
			Snackbar.Add("Catalog name cannot be empty", Severity.Error);
			return;
		}

		if (EditedCatalog is null)
		{
			//TODO Move to room service
			var request = new Dto.CreateCatalogRequest
				{
					Name = _catalogName,
					SharedToSessionIds = _selectedSessions.Select(s => s.Id),
					SharedToUserIds = _selectedContacts.Select(u => u.Id)
				};

			try
			{
				await StorageClient.CreateCatalogAsync(request);
				Snackbar.Add("Catalog created", Severity.Success);
				Dialog.Close(DialogResult.Ok(true));
			}
			catch
			{
				Snackbar.Add("Failed to create catalog", Severity.Error);
			}

		}
		else
		{
			var request = new Dto.UpdateCatalogRequest
				{
					Id = EditedCatalog.Id,
					Name = _catalogName,
					SharedToSessionIds = _selectedSessions.Select(s => s.Id),
					SharedToUserIds = _selectedContacts.Select(s => s.Id)
				};

			try
			{
				await StorageClient.UpdateCatalogAsync(request);
				Snackbar.Add("Catalog updated", Severity.Success);
				Dialog.Close(DialogResult.Ok(true));
			}
			catch
			{
				Snackbar.Add("Failed to update catalog", Severity.Error);
			}

		}
	}

	void Cancel() => Dialog.Cancel();
}