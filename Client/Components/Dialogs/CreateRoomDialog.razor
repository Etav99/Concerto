@using Concerto.Client.Services
@using Concerto.Client.Components.Pickers
@inject IDialogService DialogService
@inject IContactService ContactService
@inject ISnackbar Snackbar
@inject HttpClient Http

<MudDialog>
    <DialogContent>
        <MudTextField @bind-Value="_roomName" T="string" Label="Name"></MudTextField>
        <ContactPicker @bind-SelectedContacts="_selectedContacts" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance Dialog { get; set; }

    private string? _roomName;
	
	private ISet<Dto.User> _selectedContacts = new HashSet<Dto.User>();	

    private async Task Submit()
    {
        if(String.IsNullOrEmpty(_roomName)){
            Snackbar.Add("Room name cannot be empty", Severity.Error);
            return;
        }
        if(!_selectedContacts.Any()) {
            Snackbar.Add("Members cannot be empty", Severity.Error);
            return;
        }
		
        // Move to room manager
		var room = new Dto.CreateRoomRequest {
			Name = _roomName,
            Members = _selectedContacts
		};
		
        var response = await Http.PostAsJsonAsync("Room/CreateRoomForCurrentUser", room);
		if (response.IsSuccessStatusCode)
		{
			Snackbar.Add("Room created", Severity.Success);
			Dialog.Close(DialogResult.Ok(true));
		}
		else
		{
			Snackbar.Add("Failed to create room", Severity.Error);
		}
	}

    void Cancel() => Dialog.Cancel();
}