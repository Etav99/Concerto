@using Concerto.Client.Services
@inject IContactService ContactService

<MudPaper Elevation="0" Outlined="true" Class="pa-4">
    <MudText>@Label</MudText>
	<MudStack Spacing="4">
		<MudStack Row="true">
			<MudAutocomplete T="Dto.User" Label="Select user" @ref="_addContactAutocomplete"
							 ValueChanged="@AddMember" SearchFunc="@SearchContacts" Variant="Variant.Outlined"
							 ShowProgressIndicator="true" ProgressIndicatorColor="@Color.Default"
							 ToStringFunc="@(u => u == null ? null : $"{u.FullName} ({u.Username})")" />
		</MudStack>
		<MudPaper Elevation="0">
			<MudChipSet AllClosable="true" OnClose="Closed">
				<MudText>
					Selected users:
				</MudText>
				@foreach (var contact in _selectedContacts)
				{
					<MudChip Value="@contact" Text="@contact.FullName"></MudChip>
				}
			</MudChipSet>
		</MudPaper>
	</MudStack>
</MudPaper>


@code {
    [Parameter]
    public ISet<Dto.User> SelectedContacts
    {
        get => _selectedContacts;
        set => _selectedContacts = value.ToHashSet();
    }

    [Parameter]
    public string Label { get; set; } = string.Empty;

    private HashSet<Dto.User> _selectedContacts = new HashSet<Dto.User>();
    private MudAutocomplete<Dto.User>? _addContactAutocomplete;

    private async Task<IEnumerable<Dto.User>> SearchContacts(string searchString)
    {
        await ContactService.LoadContactsAsync();
        if (string.IsNullOrWhiteSpace(searchString))
            return ContactService.Contacts.Where(c => !_selectedContacts.Contains(c));
        return ContactService.Contacts.Where(c => (c.FullName.Contains(searchString) || c.Username.Contains(searchString)) && !_selectedContacts.Contains(c));
    }

    [Parameter]
    public EventCallback<ISet<Dto.User>> SelectedContactsChanged { get; set; }

    private async Task AddMember(Dto.User user)
    {
        _selectedContacts.Add(user);
        _addContactAutocomplete!.Reset();
        await SelectedContactsChanged.InvokeAsync(SelectedContacts);
    }

    public async Task Closed(MudChip chip)
    {
        var user = chip.Value as Dto.User;
        if (user is not null) _selectedContacts.Remove(user);
        await SelectedContactsChanged.InvokeAsync(SelectedContacts);
    }
}
