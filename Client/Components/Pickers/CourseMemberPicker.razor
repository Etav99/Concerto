@using Concerto.Client.Services
@using Concerto.Shared.Models.Dto;
@using System.Diagnostics.CodeAnalysis;
@inject IContactService ContactService

<MudTable @ref="table" T="CourseUser" Comparer="comparer" Items="Items" MultiSelection="!_editing" @bind-SelectedItems="SelectedCourseUsers" Filter="new Func<CourseUser,bool>(Filter)"
          RowEditCommit="EditCommited" OnRowClick="RowClick" RowEditPreview="OnRowEdit" RowEditCancel="EditCanceled"
          ApplyButtonPosition="TableApplyButtonPosition.End" EditTrigger="TableEditTrigger.EditButton" EditButtonPosition="TableEditButtonPosition.End"
          IsEditRowSwitchingBlocked="true" 
          SortLabel="Sort By" Dense="true" Hover="true" CanCancelEdit="true" Outlined="true" FixedFooter="true" FixedHeader="true" Height="400px">

    <ToolBarContent>
        <MudText Typo="Typo.subtitle1">Select members</MudText>
        <MudSpacer />
        <MudSwitch @bind-Checked="@_showSelectedOnly" Color="Color.Primary">Show only selected</MudSwitch>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="ma-0"></MudTextField>
    </ToolBarContent>

    <ColGroup>
        <col style="padding: 0; width:32px" />
        <col style="width:32px;" />
        <col style="width:100px;" />
        <col style="width:100px;" />
        <col style="width:200px;" />
        <col style="width:100px;" />
    </ColGroup>

    <HeaderContent>
        @if (_editing)
        {
            <MudTh></MudTh>
        }
        <MudTh><MudTableSortLabel SortBy="new Func<CourseUser, object>(x=> SelectedCourseUsers.Contains(x))">Selected</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<CourseUser, object>(x=> Users[x.UserId].FirstName)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<CourseUser, object>(x=> Users[x.UserId].LastName)" InitialDirection="SortDirection.Ascending">Surname</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<CourseUser, object>(x=> SelectedCourseUsers.Contains(x) ? x.Role.ToDisplayString() : string.Empty)">Role</MudTableSortLabel></MudTh>
    </HeaderContent>

    <RowTemplate>
        @if(_editing)
        {
            <MudTd DataLabel=""><MudCheckBox Dense="true" Disabled="true" Checked="@SelectedCourseUsers.Contains(context)" /></MudTd>
        }
        <MudTd DataLabel="Selected">←</MudTd>
        <MudTd DataLabel="Name">@Users[context.UserId].FirstName</MudTd>
        <MudTd DataLabel="Surname">@Users[context.UserId].LastName</MudTd>
        @if(SelectedCourseUsers.Contains(context)){
            <MudTd DataLabel="Role">@context.Role.ToDisplayString()</MudTd>
        }
        else
        {
            <MudTd DataLabel="Role">-</MudTd>
        }
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel=""><MudCheckBox Dense="true" Disabled="true" Checked="true" /></MudTd>
        <MudTd DataLabel="Selected">←</MudTd>
        <MudTd DataLabel="Name">@Users[context.UserId].FirstName</MudTd>
        <MudTd DataLabel="Surname">@Users[context.UserId].LastName</MudTd>
        <MudTd DataLabel="Role">
            <CourseRolePicker @bind-Value="context.Role"/>
         </MudTd>
    </RowEditingTemplate>

    <FooterContent>
        @if (_editing)
        {
            <MudTd DataLabel=""><MudCheckBox Dense="true" Disabled="true" Checked="CourseUsers.Count == SelectedCourseUsers.Count" /></MudTd>
            <MudTd colspan="4">Select All</MudTd>
        }
        else
        {
            <MudTd colspan="4">Select All</MudTd>
        }
    </FooterContent>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{2, 50, 100}" />
    </PagerContent>

</MudTable>


@code
{
    [Parameter]
    public HashSet<CourseUser> SelectedCourseUsers { get; set; } = null!;

    [Parameter]
    public EventCallback<HashSet<CourseUser>> SelectedCourseUsersChanged { get; set; }

    bool Loading => CourseUsers is null || Users is null;

    private HashSet<CourseUser> CourseUsers { get; set; } = new();
    private Dictionary<long, User> Users { get; set; } = new();

    private CourseUser? _editedRowBackup;
    private string _searchString = "";

    bool _editing = false;

    bool _showSelectedOnly = false;
    HashSet<CourseUser> Items => _showSelectedOnly ? SelectedCourseUsers : CourseUsers;

    MudTable<CourseUser>? table;

    CourseUserIdEqualityComparer comparer = new();
    protected override async Task OnInitializedAsync()
    {
        await ContactService.LoadContactsAsync();
        CourseUsers = ContactService.Contacts.Select(u => new CourseUser(u.Id, CourseUserRole.Member)).ToHashSet(comparer);
        Users = ContactService.Contacts.ToDictionary(u => u.Id);
    }

    private void EditCommited(object commitedCourseUser)
    {
        if (!SelectedCourseUsers.Contains((CourseUser)commitedCourseUser))
        {
            SelectedCourseUsers.Add((CourseUser)commitedCourseUser);
        }
        SelectedCourseUsersChanged.InvokeAsync(SelectedCourseUsers).AndForget();
        _editing = false;
    }

    private void EditCanceled(object editedCourseUser)
    {
        ((CourseUser)editedCourseUser).Role = _editedRowBackup!.Role;
        _editing = false;
        StateHasChanged();
    }

    private async Task RowClick(TableRowClickEventArgs<CourseUser> rowClick)
    {
        if (_editing) return;
        CourseUser courseUser = rowClick.Item;
        if (!SelectedCourseUsers.Contains(courseUser))
        {
            SelectedCourseUsers.Add(courseUser);
        }
        else
        {
            SelectedCourseUsers.Remove(courseUser);
        }
        await SelectedCourseUsersChanged.InvokeAsync(SelectedCourseUsers);
    }

    private void OnRowEdit(object editedCourseUser)
    {
        _editedRowBackup = (CourseUser)editedCourseUser with { };
        _editing = true;
        StateHasChanged();
    }

    private bool Filter(CourseUser user)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (Users[user.UserId].FirstName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (Users[user.UserId].LastName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (Users[user.UserId].FullName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}