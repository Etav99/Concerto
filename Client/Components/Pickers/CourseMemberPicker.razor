@using Concerto.Client.Services
@using Concerto.Shared.Models.Dto;
@inject IContactService ContactService

<MudPaper Elevation="0" Outlined="true" Class="pa-4">
    <MudStack Spacing="4">
        <MudStack Row="true">
            <MudAutocomplete T="User" Label="Select user" @ref="_addUserAutocomplete"
                             ValueChanged="@AddUser" SearchFunc="@SearchContacts" Variant="Variant.Outlined"
                             ShowProgressIndicator="true" ProgressIndicatorColor="@Color.Default"
                             ToStringFunc="@(u => u == null ? null : $"{u.FullName}")" />
        </MudStack>
        <MudPaper Elevation="0">

            <MudList>
                @foreach (var courseUser in CourseUsers)
                {
                    <MudListItem Icon="@Icons.Material.Filled.Person">
                        <MudStack Row="true" AlignItems="AlignItems.Center">
                            <MudText>@_selectedMembers[courseUser.UserId].FullName</MudText>
                            <CourseRolePicker @bind-Value="courseUser.Role" OnChange="RoleChanged" />
                            <MudIconButton OnClick="@(async () => RemoveMember(courseUser))" Icon="@Icons.Material.Filled.Close" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" />
                        </MudStack>
                    </MudListItem>
                }
            </MudList>

        </MudPaper>
    </MudStack>
</MudPaper>


@code
{
    [Parameter]
    public ISet<CourseUser> CourseUsers { get; set; } = null!;
    [Parameter]
    public EventCallback<ISet<CourseUser>> CourseUsersChanged { get; set; }

    private Dictionary<long, User> _selectedMembers = new Dictionary<long, User>();

    private MudAutocomplete<User>? _addUserAutocomplete;
	
    private async Task<IEnumerable<User>> SearchContacts(string searchString)
    {
        await ContactService.LoadContactsAsync();
        if (string.IsNullOrWhiteSpace(searchString))
			return ContactService.Contacts.Where(c => !_selectedMembers.Keys.Contains(c.Id));
        return ContactService.Contacts.Where(c => (c.FullName.Contains(searchString) || c.Username.Contains(searchString)) && !_selectedMembers.Keys.Contains(c.Id));
    }

    private async Task RoleChanged()
    {
        await CourseUsersChanged.InvokeAsync(CourseUsers);
    }

    private void AddUser(User user)
    {
        CourseUsers.Add(new CourseUser(user.Id, CourseUserRole.Member));
        _selectedMembers.Add(user.Id, user);

        _addUserAutocomplete!.Reset();
        CourseUsersChanged.InvokeAsync(CourseUsers);
    }

    private void RemoveMember(CourseUser courseUser)
    {
        CourseUsers.Remove(courseUser);
        _selectedMembers.Remove(courseUser.UserId);
		
        CourseUsersChanged.InvokeAsync(CourseUsers);
    }
}