@using Concerto.Shared.Models.Dto;

<MudSelect Dense="true" Margin="Margin.Dense" T="FolderPermission" Value="Value" ValueChanged="ValueChanged" Label="Permission" AnchorOrigin="Origin.BottomCenter" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Security">
    @if (Inherited.HasValue)
    {
        <MudSelectItem Value="@(new FolderPermission(Inherited.Value, true))">@($"Inherited - {ToText(Inherited.Value)}")</MudSelectItem>
    }
    <MudSelectItem Value="@(Values[FolderPermissionType.Read])">@ToText(FolderPermissionType.Read)</MudSelectItem>
    <MudSelectItem Value="@(Values[FolderPermissionType.ReadWriteOwned])">@ToText(FolderPermissionType.ReadWriteOwned)</MudSelectItem>
    <MudSelectItem Value="@(Values[FolderPermissionType.ReadWrite])">@ToText(FolderPermissionType.ReadWrite)</MudSelectItem>
</MudSelect>


@code {
    [Parameter]
    public FolderPermission Value { get; set; } = null!;

    [Parameter]
    public EventCallback<FolderPermission> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<FolderPermission> OnChange { get; set; }

    [Parameter]
    public FolderPermissionType? Inherited { get; set; }
	
    private static Dictionary<FolderPermissionType, FolderPermission> Values = new() {
        [FolderPermissionType.Read] = new FolderPermission(FolderPermissionType.Read, false),
        [FolderPermissionType.ReadWriteOwned] = new FolderPermission(FolderPermissionType.ReadWriteOwned, false),
        [FolderPermissionType.ReadWrite] = new FolderPermission(FolderPermissionType.ReadWrite, false),
    };

	private static string ToText(FolderPermissionType type)
	{
		return type switch
		{
			FolderPermissionType.Read => "Reader",
			FolderPermissionType.ReadWriteOwned => "Contributor",
			FolderPermissionType.ReadWrite => "Editor",
			_ => throw new ArgumentOutOfRangeException(nameof(type), type, null)
		};
	}
}
