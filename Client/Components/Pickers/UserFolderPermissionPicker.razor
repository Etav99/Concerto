@using Concerto.Client.Services
@using Concerto.Shared.Models.Dto;
@inject IContactService ContactService

<MudPaper Elevation="0" Outlined="true" Class="pa-4">
    <MudStack Spacing="4">
        <MudStack Row="true">
            <MudAutocomplete T="User" Label="Select user" @ref="_addUserAutocomplete"
                             ValueChanged="@AddUser" SearchFunc="@SearchContacts" Variant="Variant.Outlined"
                             ShowProgressIndicator="true" ProgressIndicatorColor="@Color.Default"
                             ToStringFunc="@(u => u == null ? null : $"{u.FullName}")" />
        </MudStack>
        <MudPaper Elevation="0">

            <MudList>
                @foreach (var userFolderPermission in UserFolderPermissions)
                {
                    <MudListItem Icon="@Icons.Material.Filled.Person">
                        <MudStack Row="true" AlignItems="AlignItems.Center">
                            <MudText>@userFolderPermission.User.FullName</MudText>
                            <FolderPermissionPicker ValueChanged="PermissionTypeChanged" @bind-FolderPermissionType="userFolderPermission.Permission.Type" />
                            <MudIconButton OnClick="@(async () => RemoveUserPermission(@userFolderPermission))" Icon="@Icons.Material.Filled.Close" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" />
                        </MudStack>
                    </MudListItem>
                }
            </MudList>

        </MudPaper>
    </MudStack>
</MudPaper>


@code {
    [Parameter]
    public ISet<UserFolderPermission> UserFolderPermissions { get; set; } = null!;
    [Parameter]
    public EventCallback<ISet<UserFolderPermission>> UserFolderPermissionsChanged { get; set; }

	
    private MudAutocomplete<User>? _addUserAutocomplete;

    private async Task<IEnumerable<User>> SearchContacts(string searchString)
    {
        await ContactService.LoadContactsAsync();
        if (string.IsNullOrWhiteSpace(searchString))
			return ContactService.Contacts.Where(c => !UserFolderPermissions.Select(ufp => ufp.User).Contains(c));
        return ContactService.Contacts.Where(c => (c.FullName.Contains(searchString) || c.Username.Contains(searchString)) && !UserFolderPermissions.Select(ufp => ufp.User).Contains(c));
    }

    private async Task PermissionTypeChanged()
    {
        await UserFolderPermissionsChanged.InvokeAsync(UserFolderPermissions);
    }

    private void AddUser(User user)
    {
        UserFolderPermissions.Add(new UserFolderPermission
            {
                User = user,
                Permission = new FolderPermission
                {
                    Type = FolderPermissionType.Read,
                    Inherited = false,
                }
            });
        _addUserAutocomplete!.Reset();
        UserFolderPermissionsChanged.InvokeAsync(UserFolderPermissions);
    }

    private void RemoveUserPermission(UserFolderPermission userPermission)
    {
        UserFolderPermissions.Remove(userPermission);
        UserFolderPermissionsChanged.InvokeAsync(UserFolderPermissions);
    }
}