@using Concerto.Client.Components.Pickers
@using Concerto.Client.Services;
@using Concerto.Shared.Models.Dto;

@inject ICourseService CourseService

@if(Loading) {
	
}
else {
	<MudStack Spacing="4" Class="pa-4" Style="height: 100%; overflow: auto">
		
		<MudPaper Elevation="0" Style="align-self: flex-start" Class="">
			<MudButton OnClick="Discard" Disabled="!Changed" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Restore" Color="Color.Error">Discard</MudButton>
			<MudButton OnClick="Save" Disabled="!Changed" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Success">Save</MudButton>
		</MudPaper>


		<MudPaper Class="d-flex align-center pa-4" Elevation="0" Outlined="true">
			<MudIcon Class="mr-2" Icon="@Icons.Material.Filled.Person" Title="Role" />
			<MudText>Your role in this course: @CourseSettings?.CurrentUserRole.ToDisplayString()</MudText>
		</MudPaper>

		<MudPaper Elevation="0">
			<MudTextField Immediate="true" Variant="Variant.Outlined" @bind-Value="Request.Name" T="string" Label="Course name"></MudTextField>
		</MudPaper>

		<CourseMemberManager @bind-SelectedCourseUsers="Request.Members" ExistingCourseUsers="ExistingCourseUsers"/>

	</MudStack>
}



@code {
	[Parameter]
	public long CourseId { get; set; }

	CourseSettings? CourseSettings { get; set; }

	private HashSet<CourseUser> ChangeDetectionSet { get; set; } = null!;

	bool Changed => Request.Name != CourseSettings!.Name || !ChangeDetectionSet.SetEquals(Request.Members);

	// Form
	private UpdateCourseRequest Request { get; set; } = null!;
	private HashSet<CourseUser> ExistingCourseUsers { get; set; } = null!;

	bool Loading => CourseSettings is null || Request is null || ExistingCourseUsers is null;

	protected override async Task OnInitializedAsync()
	{
		await Initialize();
	}

	private async Task Initialize()
	{
		CourseSettings = await CourseService.GetCourseSettings(CourseId);
		ExistingCourseUsers = CourseSettings.Members.ToHashSet(new CourseUserIdEqualityComparer());
		ChangeDetectionSet = ExistingCourseUsers.ToHashSet();
		Request = new UpdateCourseRequest()
			{
				CourseId = CourseSettings.Id,
				Name = CourseSettings.Name,
				Description = CourseSettings.Description,
				Members = ExistingCourseUsers.ToHashSet(new CourseUserIdEqualityComparer()),
			};
	}

	private void Discard()
	{
		Request.Members = ExistingCourseUsers.ToHashSet(new CourseUserIdEqualityComparer());
		Request.Name = CourseSettings!.Name;
	}

	private async Task Save()
	{
		await CourseService.UpdateCourse(Request);
		await Initialize();
	}
}
