@using Concerto.Shared.Models.Dto;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.Extensions.Options
@using Concerto.Client.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Blazored.LocalStorage
@inherits LayoutComponentBase

@inject NavigationManager Navigation
@inject IOptionsSnapshot<RemoteAuthenticationOptions<ApiAuthorizationProviderOptions>> Options
@inject IBreadcrumbsService BreadcrumbsService
@inject IAppSettingsService AppSettingsService
@inject IUserService UserService
@inject ISnackbar Snackbar
@inject ISyncLocalStorageService LocalStorage

<MudThemeProvider @bind-IsDarkMode="@DarkMode"/>
<MudDialogProvider CloseOnEscapeKey="true" DisableBackdropClick="true" MaxWidth="MaxWidth.Large" CloseButton="true"/>
<MudSnackbarProvider/>
<CustomStyleProvider DarkMode="@DarkMode"/>

<MudLayout Style="height: 100vh;">
	<MudAppBar Elevation="0" Dense="true">
		<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(e => DrawerToggle())"/>
		<NavigationToolbar/>
		<AuthorizeView>
			<Authorized>
				<UploadManager />
				<MudMenu Dense="true" AnchorOrigin="Origin.BottomRight">
					<ActivatorContent>
						<MudButton>
							<ChildContent>
								<MudIcon Style="color: var(--mud-palette-appbar-text)" Icon="@Icons.Material.Sharp.Person" Size="Size.Large"/>
								<MudIcon Style="color: var(--mud-palette-appbar-text)" Icon="@Icons.Material.Filled.ArrowDropDown" Size="Size.Large"/>
							</ChildContent>
						</MudButton>
					</ActivatorContent>
					<ChildContent>
						<MudMenuItemW Style="pointer-events: none;" Icon="@Icons.Material.Filled.PermIdentity">
							@context.User.Identity?.Name
						</MudMenuItemW>
						<MudMenuItemW Icon="@Icons.Material.Filled.ManageAccounts">
							<MudLink Color="Color.Default" Underline="Underline.None" Target="_blank" Href="@_appSettings?.AccountManagementUrl">
								<MudStack Row="true" Class="">
									<MudText Typo="Typo.body2">Manage account</MudText>
									<MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.OpenInNew"/>
								</MudStack>
							</MudLink>
						</MudMenuItemW>
						<MudMenuItemW Icon="@(DarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)" OnTouch="()=> toggleDarkMode(!DarkMode)" OnClick="() => toggleDarkMode(!DarkMode)">Toggle theme</MudMenuItemW>
						<MudMenuItemW Icon="@Icons.Material.Filled.Logout" IconColor="Color.Error" OnTouch="BeginLogout" OnClick="BeginLogout">Log out</MudMenuItemW>
					</ChildContent>
				</MudMenu>
			</Authorized>
			<NotAuthorized>
				<MudSwitch T="bool" Checked="@DarkMode" CheckedChanged="@(b => toggleDarkMode(b))" ThumbIconColor="Color.Dark" ThumbIcon="@(DarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)">Theme</MudSwitch>
				<MudStack Row="true">
					<MudButton Href="authentication/login" Variant="Variant.Text" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Login">Sign in</MudButton>
				</MudStack>
			</NotAuthorized>
		</AuthorizeView>
	</MudAppBar>
	<MudDrawer @bind-Open="_drawerOpen" Elevation="1">
		<MudDrawerHeader>
			<MudStack Row="true" AlignItems="AlignItems.Center">
				<MudText Typo="Typo.h4">Concerto</MudText>
			</MudStack>

		</MudDrawerHeader>
		<NavMenu/>
	</MudDrawer>
	<MudMainContent Class="pt-12 d-flex" Style="height: 100%">
		<MudContainer MaxWidth="MaxWidth.ExtraLarge" Style="overflow: auto" Class="px-0 flex-grow-1">
			<CascadingValue Value="@DarkMode">
				@Body
			</CascadingValue>
		</MudContainer>
	</MudMainContent>
</MudLayout>

@code {

	[CascadingParameter]
	private Task<AuthenticationState>? authenticationStateTask { get; set; }


	bool DarkMode { get; set; }
	bool _drawerOpen = true;
	ClientAppSettings? _appSettings;

	void DrawerToggle()
	{
		_drawerOpen = !_drawerOpen;
	}

	private void BeginLogout()
	{
		Navigation.NavigateToLogout("authentication/logout");
	}

	private void LogIn()
	{
		Navigation.NavigateToLogin(Options.Get(
			Microsoft.Extensions.Options.Options.DefaultName)
			.AuthenticationPaths.LogInPath);
	}

	private void toggleDarkMode(bool darkMode)
	{
		DarkMode = darkMode;
		LocalStorage.SetItem("darkMode", DarkMode);
	}

	protected override void OnInitialized()
	{
		_appSettings = AppSettingsService.AppSettings;
		if (LocalStorage.ContainKey("darkMode"))
		{
			DarkMode = LocalStorage.GetItem<bool>("darkMode");
		}
		else
		{
			LocalStorage.SetItem("darkMode", DarkMode);
		}
	}

}