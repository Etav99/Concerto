@using Concerto.Shared.Extensions;
@using Concerto.Shared.Models.Dto;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.Extensions.Options
@using Concerto.Client.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Blazored.LocalStorage
@inherits LayoutComponentBase

@inject NavigationManager Navigation
@inject IOptionsSnapshot<RemoteAuthenticationOptions<ApiAuthorizationProviderOptions>> Options
@inject IBreadcrumbsService BreadcrumbsService
@inject IAppSettingsService AppSettingsService
@inject IUserService UserService
@inject ISnackbar Snackbar
@inject ISyncLocalStorageService LocalStorage

<CustomStyleProvider DarkMode="@_darkMode" />
<MudThemeProvider @bind-IsDarkMode="@_darkMode" />
<CascadingValue Value="@_layoutState">
	<MudDialogProvider CloseOnEscapeKey="true" DisableBackdropClick="true" MaxWidth="MaxWidth.Large" CloseButton="true" />
</CascadingValue>
<MudSnackbarProvider />
<MudBreakpointProvider OnBreakpointChanged="OnBreakpointChanged" />

<CascadingValue Value="@_layoutState">
	<MudLayout Style="height: 100vh;">
		<MudAppBar Elevation="0" Dense="true">
			<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(e => DrawerToggle())" />
			<NavigationToolbar />
			<AuthorizeView Policy="@AuthorizationPolicies.IsNotVerified.Name">
				<Authorized>
					<UploadManager />
					<MudMenu Dense="true" AnchorOrigin="Origin.BottomRight">
						<ActivatorContent>
							<MudButton title="Account">
								<ChildContent>
									<MudIcon Style="color: var(--mud-palette-appbar-text)" Icon="@Icons.Material.Sharp.Person" Size="AppbarIconSize" />
									<MudIcon Style="color: var(--mud-palette-appbar-text); margin-left: -10px" Icon="@Icons.Material.Filled.ArrowDropDown" Size="AppbarIconSize" />
								</ChildContent>
							</MudButton>
						</ActivatorContent>
						<ChildContent>
							<MudMenuItemW Style="pointer-events: none;" Icon="@Icons.Material.Filled.PermIdentity">
								@context.User.Identity?.Name
							</MudMenuItemW>
							<MudLink Color="Color.Default" Underline="Underline.None" Target="_blank" Href="@_appSettings?.AccountManagementUrl">
							<MudMenuItemW Icon="@Icons.Material.Filled.ManageAccounts">
									<MudStack Row="true" Class="">
										<MudText Typo="Typo.body2">Manage account</MudText>
										<MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.OpenInNew" />
									</MudStack>
							</MudMenuItemW>
							</MudLink>
							<MudMenuItemW Icon="@(_darkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)" OnTouch="()=> toggleDarkMode(!_darkMode)" OnClick="() => toggleDarkMode(!_darkMode)">Toggle theme</MudMenuItemW>
							<MudMenuItemW Icon="@Icons.Material.Filled.Logout" IconColor="Color.Error" OnTouch="BeginLogout" OnClick="BeginLogout">Log out</MudMenuItemW>
						</ChildContent>
					</MudMenu>
				</Authorized>
				<NotAuthorized>
					<MudSwitch T="bool" Checked="@_darkMode" CheckedChanged="@(b => toggleDarkMode(b))" ThumbIconColor="Color.Dark" ThumbIcon="@(_darkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)">Theme</MudSwitch>
					<MudStack Row="true">
						<MudButton Href="authentication/login" Variant="Variant.Text" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Login">Sign in</MudButton>
					</MudStack>
				</NotAuthorized>
			</AuthorizeView>
		</MudAppBar>
		<MudDrawer @bind-Open="_drawerOpen" Elevation="1">
			<MudDrawerHeader>
				<MudStack Row="true" AlignItems="AlignItems.Center">
					<MudText Typo="Typo.h4">Concerto</MudText>
				</MudStack>

			</MudDrawerHeader>
			<NavMenu />
		</MudDrawer>
		<MudMainContent Class="pt-12 d-flex" Style="height: 100%">
			<MudContainer MaxWidth="MaxWidth.ExtraLarge" Style="overflow: auto" Class="px-0 flex-grow-1">
				@Body
			</MudContainer>
		</MudMainContent>
	</MudLayout>
</CascadingValue>
@code {

	[CascadingParameter]
	private Task<AuthenticationState>? authenticationStateTask { get; set; }

	private LayoutState _layoutState = new LayoutState { Breakpoint = Breakpoint.Always, DarkMode = false };

	Size AppbarIconSize => _layoutState.Xs ? Size.Medium : Size.Large;

	bool _darkMode { get; set; }
	bool _drawerOpen = true;
	ClientAppSettings? _appSettings;

	void DrawerToggle()
	{
		_drawerOpen = !_drawerOpen;
	}

	private void BeginLogout()
	{
		Navigation.NavigateToLogout("authentication/logout");
	}

	private void LogIn()
	{
		Navigation.NavigateToLogin(Options.Get(
			Microsoft.Extensions.Options.Options.DefaultName)
			.AuthenticationPaths.LogInPath);
	}

	private void toggleDarkMode(bool darkMode)
	{
		_darkMode = darkMode;
		LocalStorage.SetItem("darkMode", _darkMode);
		_layoutState = _layoutState with { DarkMode = _darkMode };
	}

	protected override void OnInitialized()
	{
		_appSettings = AppSettingsService.AppSettings;
		if (LocalStorage.ContainKey("darkMode"))
		{
			_darkMode = LocalStorage.GetItem<bool>("darkMode");
		}
		else
		{
			LocalStorage.SetItem("darkMode", _darkMode);
		}

		_layoutState = _layoutState with { DarkMode = _darkMode };
	}

	private void OnBreakpointChanged(Breakpoint breakpoint)
	{
		_layoutState = _layoutState with { Breakpoint = breakpoint };
	}

}