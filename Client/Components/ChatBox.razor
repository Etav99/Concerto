@using Concerto.Client.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Concerto.Shared.Extensions

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@implements IDisposable
@inject IJSRuntime JsRuntime
@inject IChatService ChatService
@inject IUserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudPaper Class="d-flex justify-space-between flex-column flex-grow-1 ma-2 border-solid border-2 mud-border-primary" Width="50%" Elevation="0">

	<MudPaper Class="pa-2 mb-2 mud-theme-primary" Square="true" Elevation="0">
		@if (SelectedConversation != null)
		{
			<MudText Align="Align.Center">@ConversationName</MudText>
		}
	</MudPaper>

	<MudPaper Class="d-flex flex-column-reverse mx-1" Elevation="0" Style="max-height:65vh;min-height:65vh; overflow:scroll;" id="messagesContainer">
		@if (SelectedConversation != null && ChatService.Messages.ContainsKey(SelectedConversation.ConversationId))
		{
			foreach (var message in ChatService.Messages[SelectedConversation.ConversationId])
			{
			if (message.SenderId == UserService.UserId || message.SenderId == 0)
				{
					<MudPaper Class="d-inline-flex mt-1 mx-2 justify-end ps-2" Elevation="0">
						<MudPaper Class="pa-2 mud-theme-secondary" Elevation="0">
							@message.Content
						</MudPaper>
					</MudPaper>
				}
				else
				{
					<MudPaper Class="d-inline-flex mt-1 mx-2 ps-2" Elevation="0">
						<MudPaper Class="pa-2 mud-theme-tertiary" Elevation="0">
							@message.Content
						</MudPaper>
					</MudPaper>
				}


			}
		}
	</MudPaper>

	<MudPaper Class="d-flex flex-row align-stretch pa-4 mx-4" Elevation="0">
		<MudTextField @bind-Value="MessageContent" Immediate="true" OnKeyPress="Enter" Label="Message" Variant="Variant.Filled">></MudTextField>
		<MudButton OnClick="Send" StartIcon="@Icons.Material.Filled.Send" Color="Color.Primary" ButtonType="ButtonType.Button">Send</MudButton>
	</MudPaper>

</MudPaper>

@code {
	public string MessageContent { get; set; } = string.Empty;
	bool loading = true;

	[Parameter]
	public Dto.Conversation? SelectedConversation { get; set; }
	private string ConversationName { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		ChatService.OnMessageReceivedCallback += OnMessageReceivedCallback;
		await ChatService.ConnectToChatAsync();
		loading = true;
		await LoadSelectedConversation();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await JsRuntime.InvokeAsync<string>("scrollToBottom", "messagesContainer");
	}

	private async Task Send()
	{
		if (ChatService.Connected && !string.IsNullOrEmpty(MessageContent) && SelectedConversation != null && SelectedConversation.ConversationId > 0)
		{
			Dto.ChatMessage message = new Dto.ChatMessage { ConversationId = SelectedConversation!.ConversationId, SendTimestamp = DateTime.UtcNow, Content = MessageContent };
			await ChatService.SendChatMessageAsync(message);
			MessageContent = string.Empty;
			ShouldRender();
		}
	}

	private async Task Enter(KeyboardEventArgs e)
	{
		if (e.Code == "Enter" || e.Code == "NumpadEnter")
		{
			await Send();
		}
	}
	
	protected override async Task OnParametersSetAsync() {
		await LoadSelectedConversation();
	}

	public async Task ChangeConversation(Dto.Conversation conversation)
	{
		SelectedConversation = conversation;
		await LoadSelectedConversation();
	}

	private async Task LoadSelectedConversation()
	{
		if (SelectedConversation == null)
			return;
		await ChatService.LoadChatMessagesAsync(SelectedConversation.ConversationId);
		GenerateConversationName();
		StateHasChanged();
	}
	
	private void OnMessageReceivedCallback(Dto.ChatMessage message)
	{
		StateHasChanged();
	}

	private void GenerateConversationName()
	{
		ConversationName = String.Join(", ", SelectedConversation?.Users?.Select(u => u.FullName) ?? Enumerable.Empty<string>());
	}

	public void Dispose() {
		ChatService.OnMessageReceivedCallback -= OnMessageReceivedCallback;
	}
}
