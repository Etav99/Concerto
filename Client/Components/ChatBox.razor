@using Concerto.Client.Components.Input
@using Concerto.Client.Services
@using Concerto.Shared.Models.Dto;
@using Microsoft.AspNetCore.Components.Authorization
@using Concerto.Shared.Extensions

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@implements IDisposable
@inject IJSRuntime JsRuntime
@inject IChatService ChatService
@inject IUserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudStack Style="width: 100%; height:100%;">
	@if(Loading)
	{
		<LoadingIndicator Color="Color.Primary" Size="Size.Large" />
	}
	else if (Error)
	{
		<MudText>Error</MudText>
	}
	else
	{
		<MudPaper Class="pa-2 mb-2 mud-theme-primary" Square="true" Elevation="0">
			<MudStack Row="true" Justify="Justify.Center">
				<MudIcon Icon="@Icons.Material.Filled.Chat" />
				<MudText Align="Align.Center">@($"{(SelectedConversationId == null ? null : ConversationName)}")</MudText>
				</MudStack>
		</MudPaper>

		<MudStack Reverse="true" Class="flex-grow-1" Justify="Justify.FlexStart" Style="overflow:auto;" id="messagesContainer">
			@foreach (var message in Conversation!.Messages)
			{
				<MudPaper Class="@(IsSender(message.SenderId) ? "ml-4 mr-8 pa-2 mud-theme-secondary" : "mr-4 ml-8 pa-2 mud-theme-tertiary")"
				  Style="@(IsSender(message.SenderId) ? "align-self: flex-end; max-width: 80%;"  : "align-self: flex-start; max-width: 80%;")" Elevation="0">
					<MudText Style="word-break: normal; overflow-wrap: anywhere">@message.Content</MudText>
				</MudPaper>
			}
		</MudStack>
		<MessageTextField OnSend="Send" />
	}
</MudStack>

@code {
	[Parameter]
	public long? SelectedConversationId { get; set; }

	[Parameter]
	public string? ConversationName { get; set; } = null!;

	private string Header => ConversationName ?? (Conversation == null ? string.Empty : Conversation.UsersString);

	private Conversation? Conversation { get; set; }

	bool Loading => ChatService.Disconnected || SelectedConversationId is null || Conversation is null;
	bool Error { get; set; } = false;

	private bool IsSender(long senderId) => senderId == UserService.UserId;


	protected override async Task OnInitializedAsync()
	{
		ChatService.OnMessageReceivedEventHandler += OnMessageReceivedCallback;
		ChatService.OnMessageSentEventHandler += OnMessageSendCallback;
		await ChatService.ConnectToChatAsync();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await JsRuntime.InvokeAsync<string>("scrollToBottom", "messagesContainer");
	}

	private async Task Send(string content)
	{
		if (string.IsNullOrEmpty(content)) return;
		Dto.ChatMessage message = new Dto.ChatMessage { SenderId = UserService.UserId!.Value, ConversationId = SelectedConversationId!.Value, SendTimestamp = DateTime.UtcNow, Content = content };
		await ChatService.SendChatMessageAsync(message);
	}



	protected override async Task OnParametersSetAsync() {
		if (SelectedConversationId.HasValue)
		{
			try
			{
				Conversation = await ChatService.GetConversation(SelectedConversationId.Value);
			}
			catch
			{
				Error = true;
			}
		}
	}

	private async Task OnMessageReceivedCallback(Dto.ChatMessage message)
	{
		if (message.ConversationId == SelectedConversationId)
		{
			await InvokeAsync(() => Conversation?.Messages.Insert(0, message));
		}
	}

	private async Task OnMessageSendCallback(Dto.ChatMessage message)
	{
		if (message.ConversationId == SelectedConversationId)
		{
			await InvokeAsync(() => Conversation?.Messages.Insert(0, message));
		}
		await JsRuntime.InvokeAsync<string>("scrollToBottom", "messagesContainer");
	}

	public void Dispose() {
		ChatService.OnMessageReceivedEventHandler -= OnMessageReceivedCallback;
		ChatService.OnMessageSentEventHandler -= OnMessageSendCallback;
	}
}
