@inject IUserService UserService
@using Concerto.Client.Components.Layout;
@using Concerto.Client.Services
@using Concerto.Shared.Models.Dto
@inherits MudComponentBase


	<MudTable @ref="table" T="User" Items="Users" MultiSelection="true" @bind-SelectedItems="SelectedUsers" Filter="new Func<User, bool>(Filter)"
			  RowsPerPage="50" Loading="Loading" RowClassFunc="RowClassFunc"
			  SortLabel="Sort By" Dense="true" Hover="true" Outlined="true" FixedFooter="true" FixedHeader="true"
			 Style="@TableStyle" Class="@Class" Height="@TableContentHeight" RowStyle="text-align: right;">

		<ToolBarContent>
			<MudText Typo="Typo.subtitle1">Course members</MudText>
			<MudSpacer/>
			<MudTextField @bind-Value="_searchString" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="ma-0"></MudTextField>
		</ToolBarContent>

		<ColGroup>


			@if(LayoutState.SmAndUp)
			{
				<col style="width: 20px" />
				<col style="min-width: 100px" />
			}
			else
			{
				<col style="padding-top: 10px" />
			}
			<col style="max-width: 32px;" />
			<col style="min-width: 100px;" />
			<col style="min-width: 100px;" />
		

		</ColGroup>

		<HeaderContent>
			<MudTh>
				<MudTableSortLabel SortBy="new Func<User, object>(x => SelectedUsers.Contains(x))">Selected</MudTableSortLabel>
			</MudTh>
			<MudTh>
				<MudTableSortLabel SortBy="new Func<User, object>(x => x.FirstName)">Name</MudTableSortLabel>
			</MudTh>
			<MudTh>
				<MudTableSortLabel SortBy="new Func<User, object>(x => x.LastName)" InitialDirection="SortDirection.Ascending">Surname</MudTableSortLabel>
			</MudTh>
		</HeaderContent>

		<RowTemplate>
			@if (LayoutState.SmAndUp)
			{
				<MudTd DataLabel="Selected">←</MudTd>
			}
			<MudTd DataLabel="Name">@context.FirstName</MudTd>
			<MudTd DataLabel="Surname">@context.LastName</MudTd>
		</RowTemplate>

		<FooterContent>
			@if (_editing)
			{
				<MudTd DataLabel="">
					<MudCheckBox Dense="true" Disabled="true" Checked="Users.Count == SelectedUsers.Count"/>
				</MudTd>
				<MudTd colspan="4">Select All</MudTd>
			}
			else
			{
				<MudTd colspan="4">Select All</MudTd>
			}
		</FooterContent>

		<PagerContent>
			<MudTablePager PageSizeOptions="new[] { 25, 50, 100 }"/>
		</PagerContent>

	</MudTable>

@code
{
	[CascadingParameter] LayoutState LayoutState { get; set; } = new();

	private string TableContentHeight => $"calc({Height})";

	string TableStyle => LayoutState.Xs
	? $"display:grid; grid-template-rows: min-content min-content 1fr min-content; {Style}"
	: $"display:grid; grid-template-rows: min-content 1fr min-content; {Style}";

	[Parameter]
	public string Height { get; set; } = "100%";

	[Parameter]
	public HashSet<User> SelectedUsers { get; set; } = null!;

	[Parameter]
	public EventCallback<HashSet<User>> SelectedUsersChanged { get; set; }

	bool Loading => Users is null;

	private HashSet<User> Users { get; set; } = new();

	private string _searchString = "";

	bool _editing = false;

	MudTable<User>? table;

	UserIdEqualityComparer comparer = new();

	protected override async Task OnInitializedAsync()
	{
		Users = (await UserService.GetUsersAsync()).ToHashSet(comparer);
	}


	private bool Filter(User user)
	{
		if (string.IsNullOrWhiteSpace(_searchString))
			return true;
		if (user.FirstName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (user.LastName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (user.FullName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}

	private string RowClassFunc(User user, int rowNumber)
	{
		if (SelectedUsers?.Contains(user) ?? false) return "row-colored row-new";
		return string.Empty;
	}
}