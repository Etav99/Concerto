@using Concerto.Client.Extensions
@using Concerto.Shared.Models.Dto
<MudSelect Disabled="IsCourseRoot" T="FolderType" Variant="Variant.Outlined" Margin="Margin.Dense" Dense="true" Value="Value" ValueChanged="ValueChanged" Label="Folder type" Adornment="Adornment.Start" AdornmentIcon="@Value.ToIcon()" AnchorOrigin="Origin.BottomCenter">
	@if (IsCourseRoot)
	{
		<MudSelectItem Value="@(FolderType.CourseRoot)">@FolderType.CourseRoot.ToDisplayString()</MudSelectItem>
	}
	else
	{
		<MudSelectItem Value="@(FolderType.Sheets)">@FolderType.Sheets.ToDisplayString()</MudSelectItem>
		<MudSelectItem Value="@(FolderType.Recordings)">@FolderType.Recordings.ToDisplayString() </MudSelectItem>
		<MudSelectItem Value="@(FolderType.Video)">@FolderType.Video.ToDisplayString()</MudSelectItem>
		<MudSelectItem Value="@(FolderType.Audio)">@FolderType.Audio.ToDisplayString()</MudSelectItem>
		<MudSelectItem Value="@(FolderType.Documents)">@FolderType.Documents.ToDisplayString()</MudSelectItem>
		<MudSelectItem Value="@(FolderType.Other)">@FolderType.Other.ToDisplayString()</MudSelectItem>
	}

</MudSelect>

@code {

	[Parameter]
	public FolderType Value { get; set; }

	[Parameter]
	public EventCallback<FolderType> ValueChanged { get; set; }

	bool IsCourseRoot => Value == FolderType.CourseRoot;

	[Parameter]
	public EventCallback<FolderType> OnChange { get; set; }

	async Task Selected(FolderType role)
	{
		await ValueChanged.InvokeAsync(role);
		await OnChange.InvokeAsync(role);
	}

}