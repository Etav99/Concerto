@using Concerto.Client.Components.Dialogs
@using Concerto.Client.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inherits MudComponentBase;
@inject HttpClient Http
@inject IDialogService DialogService
@inject IStorageService StorageService
@inject IUserService UserService
@inject IJSRuntime JS
@inject IAccessTokenProvider AccessTokenProvider

	@if (SelectedCatalog == null)
	{
		<MudTable Items="Catalogs" Loading="_loading" Filter="new Func<Dto.CatalogListItem, bool>(CatalogFilter)" SortLabel="Sort By"
		  Class="@Class" Style="@Style" Height="calc(100% - 65px)" Hover="true" Elevation="0" FixedHeader="true" FixedFooter="true">
			<ToolBarContent>
				<MudText Typo="Typo.h6">@CatalogListHeader</MudText>
				<MudSpacer />
				<MudTextField @bind-Value="_catalogSearchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
				@if (EnableCreateButton)
				{
					<AuthorizeView Roles="teacher">
						<MudSpacer />
						<MudIconButton Icon="@Icons.Material.Filled.CreateNewFolder" Color="Color.Primary" Variant="Variant.Outlined" OnClick="async () => await ShowCreateOrUpdateCatalogDialog()" />
					</AuthorizeView>
				}
			</ToolBarContent>
			<HeaderContent>
				<MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Dto.CatalogListItem, object>(x=>x.Name)">Catalog name</MudTableSortLabel></MudTh>
				<MudTh>Actions</MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="Catalog name">@context.Name</MudTd>
				<MudTd Style="text-align:right">
					<MudIconButton Icon="@Icons.Material.Filled.FolderOpen" Color="Color.Primary" Variant="Variant.Outlined" OnClick="() => OpenCatalog(context)" />
					@if (context.OwnerId == UserService.UserId)
					{
					<MudIconButton Class="ml-2" Icon="@Icons.Material.Filled.Settings" Color="Color.Primary" Variant="Variant.Outlined" OnClick="async () => await ShowCreateOrUpdateCatalogDialog(context.Id)" />
					}
				</MudTd>
			</RowTemplate>
		</MudTable>
	}
	else
	{
		<MudTable Items="@SelectedCatalog.Files" Loading="_loading" SortLabel="Sort By" Filter="new Func<Dto.UploadedFile, bool>(FileFilter)"
		  Class="pa-4 ma-2" Style="overflow: auto;" Hover="true" Elevation="0">
			<ToolBarContent>
				<MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="() => SelectedCatalog = null" aria-label="Back"></MudIconButton>
				<MudSpacer />
				<MudText Typo="Typo.h6">@SelectedCatalog.Name</MudText>
				<MudSpacer />
				<MudTextField @bind-Value="_fileSearchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
				<MudSpacer />
				@if (SelectedCatalog.OwnerId == UserService.UserId)
				{
					<MudIconButton Class="mr-2" Icon="@Icons.Material.Filled.UploadFile" Color="Color.Primary" Variant="Variant.Outlined" OnClick="UploadFiles" />
					<MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Primary" Variant="Variant.Outlined" OnClick="async () => await ShowCreateOrUpdateCatalogDialog(SelectedCatalog.Id)" />
				}
			</ToolBarContent>
			<HeaderContent>
				<MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Dto.UploadedFile, object>(x=>x.Name)">File name</MudTableSortLabel></MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="File name">@context.Name</MudTd>
				<MudTd Style="text-align:right">
					<MudIconButton Icon="@Icons.Material.Filled.FileDownload" Color="Color.Primary" Variant="Variant.Outlined" OnClick="@(() => DownloadFile(context))" />
				</MudTd>
			</RowTemplate>
		</MudTable>
	}



@code {
	[Parameter]
	public ListType Type { get; set; }
	[Parameter]
	public Dto.Session? Session { get; set; }

	private IEnumerable<Dto.CatalogListItem> Catalogs {
		get
		{
			switch(Type) {
				case ListType.Owned:
					return StorageService.OwnedCatalogs;
				case ListType.Shared:
					return StorageService.SharedCatalogs;
				case ListType.Session:
					if (Session is not null) return StorageService.SessionCatalogs(Session.Id);
					return Enumerable.Empty<Dto.CatalogListItem>();
				default:
					throw new ArgumentException("Invalid list type");
			}
		}
	}

	private bool EnableCreateButton => Type == ListType.Owned || (Type == ListType.Session && Session?.Id == UserService.UserId);
	private bool EnableSettingsButton => Type == ListType.Owned;

	private string CatalogListHeader => Type == ListType.Owned ? "Your catalogs"
										: Type == ListType.Shared ? "Shared catalogs"
										: "Session catalogs";

	private Dto.CatalogContent? SelectedCatalog { get; set; }

	private bool _loading = true;

	private string? _fileSearchString;
	private string? _catalogSearchString;
	private IEnumerable<Dto.UploadedFile> _files = Enumerable.Empty<Dto.UploadedFile>();

	public enum ListType
	{
		Owned,
		Shared,
		Session
	}

	protected override async Task OnParametersSetAsync()
	{
		await LoadCatalogs();
	}

	private async Task LoadCatalogs() {
		_loading = true;
		switch (Type)
		{
			case ListType.Owned:
				await StorageService.LoadOwnedCatalogsAsync(); break;
			case ListType.Shared:
				await StorageService.LoadSharedCatalogsAsync(); break;
			case ListType.Session:
				if (Session is not null) await StorageService.LoadSessionCatalogsAsync(Session.Id); break;
			default:
				throw new ArgumentException("Invalid list type");
		}
		_loading = false;
	}

	private bool FileFilter(Dto.UploadedFile file)
	{
		if (string.IsNullOrWhiteSpace(_fileSearchString))
			return true;
		if (file.Name.Contains(_fileSearchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}

	private bool CatalogFilter(Dto.CatalogListItem catalog)
	{
		if (string.IsNullOrWhiteSpace(_catalogSearchString))
			return true;
		if (catalog.Name.Contains(_catalogSearchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}

	public async Task UploadFiles()
	{
		var parameters = new DialogParameters { ["CatalogId"] = SelectedCatalog!.Id };
		var result = await DialogService.Show<UploadFilesDialog>("Upload files to catalog", parameters).Result;
		if ((bool)(result.Data ?? false))
		{
			_loading = true;
			SelectedCatalog = await StorageService.GetCatalogContent(SelectedCatalog.Id);
			_loading = false;
		}
	}

	public async Task ShowCreateOrUpdateCatalogDialog(long? editedCatalogId = null)
	{
		var parameters = new DialogParameters { ["EditedCatalogId"] = editedCatalogId };
		if (Type == ListType.Session && Session is not null)
		{
			parameters.Add("InitialSharedSessionId", Session.Id);
		}
		var name = editedCatalogId is null ? "Create catalog" : "Edit catalog";
		var result = await DialogService.Show<CreateOrUpdateCatalogDialog>(name, parameters).Result;
		_loading = true;
		if ((bool)(result.Data ?? false))
		{
			StorageService.InvalidateCache();
			await LoadCatalogs();
		}
		_loading = false;
	}

	public async Task DownloadFile(Dto.UploadedFile file)
	{
		var accessTokenResult = await AccessTokenProvider.RequestAccessToken();
		accessTokenResult.TryGetToken(out var accessToken);

		await JS.InvokeVoidAsync("downloadFile", file.Name, $"{Http.BaseAddress}Storage/DownloadFile?fileId={file.Id}&access_token={accessToken.Value.ToString()}");
	}

	public async Task OpenCatalog(Dto.CatalogListItem catalog)
	{
		_loading = true;
		SelectedCatalog = await StorageService.GetCatalogContent(catalog.Id);
		_loading = false;
	}
}
