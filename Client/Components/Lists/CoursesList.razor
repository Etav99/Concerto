@using Microsoft.AspNetCore.Components.Authorization

@inherits MudComponentBase

@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ICourseService CourseService


@if (Loading)
{
	<LoadingIndicator Color="Color.Primary" Size="Size.Large"/>
}
else
{
	<MudTable T="CourseListItem" Items="Courses" Hover="true" Elevation="0" Filter="new Func<CourseListItem, bool>(CourseFilter)"
		  Style="@TableStyle" Class="@Class" Height="100%" FixedHeader="true" FixedFooter="true" Outlined="true"
		  RowsPerPage="PageSize.Default" RowStyle="cursor: pointer;" OnRowClick="OnRowClick">
		<ToolBarContent>
			<MudText Class="mr-2" Typo="Typo.subtitle1">Your courses</MudText>
			<MudSpacer/>
			<MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
					  Class="mt-0 mr-2" Style="" />
			<MudSpacer/>
			<MudButtonGroup OverrideStyles="false">

				@if (LayoutState.SmAndUp)
				{
					<MudIconButton Title="Refresh" DisableElevation="true" Icon="@Icons.Material.Filled.Refresh" Color="Color.Default" Variant="Variant.Filled" OnClick="Initialize" />
					@if (ManagementEnabled)
					{
						<AuthorizeView Policy="@AuthorizationPolicies.IsTeacher.Name">
							<MudIconButton Title="Create course" DisableElevation="true" Icon="@Icons.Material.Filled.AddBox" Color="Color.Default" Variant="Variant.Filled" OnClick="CreateCourse" Disabled="false" />
						</AuthorizeView>
					}
				}

				<MudMenu Dense="true">
					<ActivatorContent>
						<MudIconButton Title="More" DisableElevation="true" Icon="@Icons.Material.Filled.MoreVert" Color="Color.Default" Variant="Variant.Filled" />
					</ActivatorContent>
					<ChildContent>
						<MudMenuItemW IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.Refresh"
								  OnTouch="Initialize" OnClick="Initialize">
							Refresh view
						</MudMenuItemW>

						@if (ManagementEnabled)
						{
							<AuthorizeView Policy="@AuthorizationPolicies.IsTeacher.Name">
								<MudMenuItemW IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.AddBox"
									  OnClick="CreateCourse" OnTouch="CreateCourse" Disabled="false">
									Create course
								</MudMenuItemW>
							</AuthorizeView>
						}

					</ChildContent>
				</MudMenu>
			</MudButtonGroup>
		</ToolBarContent>
		<HeaderContent>
			<MudTh>
				<MudTableSortLabel SortBy="new Func<CourseListItem, object>(x => x.Name)">Course name</MudTableSortLabel>
			</MudTh>
			<MudTh>
				<MudTableSortLabel SortBy="new Func<CourseListItem, object>(x => x.CreatedDate)" InitialDirection="SortDirection.Descending">Creation date</MudTableSortLabel>
			</MudTh>
			<MudTh></MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd>
				<MudText>@context.Name</MudText>
			</MudTd>
			<MudTd>
				<MudText>@context.CreatedDate</MudText>
			</MudTd>
			<MudTd Style="text-align: right">

				<MudMenu Dense="true">
					<ActivatorContent>
						<MudIconButton Title="Actions" DisableElevation="true" Icon="@Icons.Material.Filled.MoreVert" Color="Color.Default" Variant="Variant.Filled"/>
					</ActivatorContent>
					<ChildContent>
						<MudMenuItemW IconSize="Size.Small" IconColor="Color.Default" Icon="@SelectIcon" OnTouch="() => SelectCourse(context)" OnClick="() => SelectCourse(context)">@SelectLabel</MudMenuItemW>
						@if (ManagementEnabled)
						{
							<AuthorizeView Policy="@AuthorizationPolicies.IsTeacher.Name" Context="auth">
								<MudMenuItemW IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.CopyAll" OnTouch="() => CloneCourse(context)" OnClick="() => CloneCourse(context)">Clone</MudMenuItemW>
							</AuthorizeView>
						}

					</ChildContent>
				</MudMenu>
			</MudTd>
		</RowTemplate>
		<PagerContent>
			<MudTablePager PageSizeOptions="PageSize.DefaultOptions"/>
		</PagerContent>
	</MudTable>
}


@code {
	[CascadingParameter] LayoutState LayoutState { get; set; } = new();

	[Parameter]
	public EventCallback<long> OnCourseSelected { get; set; }

	private string TableStyle => LayoutState.Xs
	? $"min-height: 245px; display:grid; grid-template-rows: 0fr 0fr 1fr; {Style}"
	: $"min-height: 245px; display:grid; grid-template-rows: 0fr 1fr; {Style}";

	[Parameter]
	public string SelectLabel { get; set; } = "Open";

	[Parameter]
	public string SelectIcon { get; set; } = Icons.Material.Filled.OpenInBrowser;

	[Parameter]
	public bool ManagementEnabled { get; set; } = true;

	[Parameter]
	public IEnumerable<long> WithoutCourseIds { get; set; } = Enumerable.Empty<long>();

	private string searchString = string.Empty;

	private bool Loading => Courses is null;

	private IEnumerable<CourseListItem>? Courses { get; set; }


	protected async Task Initialize()
	{
		Courses = (await CourseService.GetCurrentUserCoursesAsync()).ExceptBy(WithoutCourseIds, x => x.Id);
	}

	protected override async Task OnInitializedAsync()
	{
		await Initialize();
	}

	private async Task SelectCourse(CourseListItem course)
	{
		await OnCourseSelected.InvokeAsync(course.Id);
	}

	private async Task DeleteCourse(CourseListItem course)
	{
		if (!await DialogService.ShowConfirmationDialog("Delete course","delete", "course", course.Name, true)) return;
		try
		{
			await CourseService.DeleteCourseAsync(course.Id);
			Snackbar.Add($"Course {course.Name} deleted", Severity.Success);
			await Initialize();
		}
		catch
		{
			Snackbar.Add($"Failed to delete course {course.Name}.", Severity.Error);
		}
	}

	private async Task OnRowClick(TableRowClickEventArgs<CourseListItem> rowClick)
	{
		await SelectCourse(rowClick.Item);
	}

	private async Task CreateCourse()
	{
		var newCourseId = await DialogService.ShowCreateCourseDialog();
		if (newCourseId > 0)
		{
			CourseService.GetCurrentUserCoursesAsync().AndForget();
			await OnCourseSelected.InvokeAsync(newCourseId);
		}
	}

	private async Task CloneCourse(CourseListItem course)
	{
		var parameters = new DialogParameters { ["CourseToClone"] = course };
		var name = $"Clone course {course.Name}";
		var result = await DialogService.Show<CloneCourseDialog>(name, parameters).Result;
		if (result.Canceled) return;
		var clonedCourseId = (long)result.Data;
		if (clonedCourseId > 0)
		{
			CourseService.GetCurrentUserCoursesAsync().AndForget();
			await OnCourseSelected.InvokeAsync(clonedCourseId);
		}
	}

	private bool CourseFilter(CourseListItem course)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (course.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}

}