@using Concerto.Client.Services
@inject NavigationManager NavigationManager
@inject IChatService ChatService
@implements IDisposable

<MudTable Items="ConversationsList" Hover="true" Elevation="0" FixedHeader="true" FixedFooter="true" Style="max-width: 100%; height:100%;">
	<ToolBarContent>
		<MudText Typo="Typo.h6">Conversations</MudText>
	</ToolBarContent>
	<RowTemplate>
		<MudTd Style="max-width: 80px; overflow:hidden; white-space:nowrap;">@String.Join(',', context.Users.Select(u => $"{u.FirstName} {u.LastName}"))</MudTd>
		<MudTd Style="max-width: 60px; overflow:hidden; white-space:nowrap;">@(context.LastMessage?.Content ?? string.Empty)</MudTd>
		<MudTd Style="text-align:right">
				<MudIconButton Icon="@Icons.Material.Filled.Chat" Color="Color.Primary" Variant="Variant.Outlined" OnClick="@(() => SelectConversation(@context))" />
		</MudTd>
	</RowTemplate>
</MudTable>

@code {

	[Parameter]
	public long? SelectedConversationId { get; set; }

	[Parameter]
	public EventCallback<Dto.Conversation> OnConversationSelected { get; set; }

	private List<Dto.Conversation> ConversationsList
	{
		get
		{
			return ChatService.Conversations.Values.OrderByDescending(x => x.LastMessage?.SendTimestamp).ToList();
		}
	}

	protected override async Task OnInitializedAsync()
	{
		ChatService.OnMessageReceivedCallback += Refresh;
		ChatService.OnMessageSentCallback += Refresh;
		await ChatService.LoadConversationsAsync();
		if (SelectedConversationId == null || SelectedConversationId <= 0)
		{
			await SelectLatestConversation();
		}
		else
		{
			SelectConversation(ChatService.Conversations[SelectedConversationId.Value]);
		}
	}

	private void Refresh(Dto.ChatMessage message)
	{
		StateHasChanged();
	}

	private void SelectConversation(Dto.Conversation conversation)
	{
		OnConversationSelected.InvokeAsync(conversation).Wait();
	}

	private async Task SelectLatestConversation()
	{
		Dto.Conversation? conversation = ConversationsList.FirstOrDefault();
		if (conversation == null) return;
		await OnConversationSelected.InvokeAsync(conversation);
	}

	public void Dispose()
	{
		ChatService.OnMessageReceivedCallback -= Refresh;
		ChatService.OnMessageSentCallback -= Refresh;
	}
}
