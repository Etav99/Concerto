@using Concerto.Client.Services
@using Concerto.Shared.Models.Dto;
@inject NavigationManager NavigationManager
@inject IChatService ChatService
@inject IUserService UserService
@implements IDisposable

<MudTable T="ConversationListItem" Items="ConversationsList" Hover="true" Elevation="0" FixedHeader="true" FixedFooter="true" Style="max-width: 100%; height:100%;"
		  OnRowClick="SelectConversation">
	<ToolBarContent>
		<MudText Typo="Typo.h6">Conversations</MudText>
	</ToolBarContent>
	<RowTemplate>
		@{
			var TdClass = SelectedConversationId == context.Id ? "mud-theme-primary" : string.Empty;
			<MudTd Class="TdClass" Style="max-width: 80px; overflow:hidden; white-space:nowrap;">@context.Name</MudTd>
			<MudTd Class="TdClass" Style="max-width: 60px; overflow:hidden; white-space:nowrap;">@(context.LastMessage?.Content ?? string.Empty)</MudTd>
		}
	</RowTemplate>
</MudTable>

@code {

	[Parameter]
	public long? SelectedConversationId { get; set; }

	[Parameter]
	public EventCallback<long> SelectedConversationIdChanged { get; set; }

	private List<ConversationListItem>? ConversationsList;


	private async Task SelectConversation(TableRowClickEventArgs<ConversationListItem> tableClick)
	{
		await SelectedConversationIdChanged.InvokeAsync(tableClick.Item.Id);
	}


	protected override async Task OnInitializedAsync()
	{
		ChatService.OnMessageReceivedEventHandler += OnMessageReceived;
		ChatService.OnMessageSentEventHandler += OnMessageReceived;

		await LoadConversations();
		if (SelectedConversationId == null || SelectedConversationId <= 0)
		{
			await SelectLatestConversation();
		}
	}

	private void Refresh(Dto.ChatMessage message)
	{
		StateHasChanged();
	}

	private async Task LoadConversations()
	{
		ConversationsList = (await ChatService.GetPrivateConversationsAsync()).ToList();
	}
	
	private async Task OnMessageReceived(ChatMessage message)
	{
		var conversation = ConversationsList?.Find(c => c.Id == message.ConversationId);
		if (conversation is not null)
		{
			conversation.LastMessage = message;
		}
		else
		{
			await LoadConversations();
		}
	}
	
	private async Task SelectLatestConversation()
	{
		Dto.ConversationListItem? conversation = ConversationsList?.FirstOrDefault();
		if (conversation == null) return;
		await SelectedConversationIdChanged.InvokeAsync(conversation.Id);
	}
	
	public void Dispose()
	{
		ChatService.OnMessageReceivedEventHandler -= OnMessageReceived;
		ChatService.OnMessageSentEventHandler -= OnMessageReceived;
	}
}
