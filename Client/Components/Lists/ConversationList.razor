@using Concerto.Client.Services
@inject NavigationManager NavigationManager
@inject IChatManager ChatManager
@implements IDisposable

<MudPaper Class="flex-grow-0 border-solid border-2 mud-border-primary pa-4 ma-2" Elevation="0">
	<MudTable Items="ConversationsList" Hover="true" Elevation="0">
		<ToolBarContent>
			<MudText Typo="Typo.h6">Conversations</MudText>
		</ToolBarContent>
		<RowTemplate>
			<MudTd>@String.Join(',', context.Users.Select(u => $"{u.FirstName} {u.LastName}"))</MudTd>
			<MudTd>@(context.LastMessage?.Content ?? string.Empty)</MudTd>
				<MudTd Style="text-align:right">
					<MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="@(() => SelectConversation(@context))">Chat</MudButton>
				</MudTd>
		</RowTemplate>
		<PagerContent>
			<MudTablePager PageSizeOptions="new int[]{50, 100}" />
		</PagerContent>
	</MudTable>
</MudPaper>

	@code {

	[Parameter]
	public long? SelectedConversationId { get; set; }

	[Parameter]
	public EventCallback<Dto.Conversation> OnConversationSelected { get; set; }

	private List<Dto.Conversation> ConversationsList
	{
		get
		{
			return ChatManager.Conversations.Values.ToList();
		}
	}

	protected override async Task OnInitializedAsync()
	{
		ChatManager.OnMessageReceivedCallback += Refresh;
		ChatManager.OnMessageSentCallback += Refresh;
		await ChatManager.LoadConversationsAsync();
		if (SelectedConversationId == null || SelectedConversationId <= 0)
		{
			await SelectLatestConversation();
		}
		else
		{
			SelectConversation(ChatManager.Conversations[SelectedConversationId.Value]);
		}
	}

	private void Refresh(Dto.ChatMessage message)
	{
		StateHasChanged();
	}

	private void SelectConversation(Dto.Conversation conversation)
	{
		OnConversationSelected.InvokeAsync(conversation).Wait();
	}

	private async Task SelectLatestConversation()
	{
		Dto.Conversation? conversation = ConversationsList.FirstOrDefault();
		if (conversation == null) return;
		await OnConversationSelected.InvokeAsync(conversation);
	}

	public void Dispose()
	{
		ChatManager.OnMessageReceivedCallback -= Refresh;
		ChatManager.OnMessageSentCallback -= Refresh;
	}
}
