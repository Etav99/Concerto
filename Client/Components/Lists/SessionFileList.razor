@using Concerto.Client.Components.Dialogs
@inject HttpClient Http;
@inject IDialogService DialogService
@inject IJSRuntime JS;

<MudPaper Class="flex-grow-0 border-solid border-2 mud-border-primary pa-4 ma-2" Elevation="0">
	<MudTable Items="_files" Hover="true" Height="65vh" SortLabel="Sort By" Elevation="0" Filter="new Func<Dto.UploadedFile, bool>(FileFilter)">
		<ToolBarContent>
			<MudText Typo="Typo.h6">Files</MudText>
			<MudSpacer />
			<MudTextField @bind-Value="_fileSearchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
			<MudSpacer />
			<MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="UploadFiles">Upload</MudButton>
		</ToolBarContent>
		<HeaderContent>
			<MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Dto.UploadedFile, object>(x=>x.Name)">File name</MudTableSortLabel></MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="File name">@context.Name</MudTd>
			<MudTd Style="text-align:right">
				<MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="@(() => DownloadFile(context))">Download</MudButton>
			</MudTd>
		</RowTemplate>
	</MudTable>
</MudPaper>


@code {
	[Parameter]
	public Dto.Session? Session { get; set; }
	private bool _loading = true;

	private string? _fileSearchString;
	private IEnumerable<Dto.UploadedFile> _files = Enumerable.Empty<Dto.UploadedFile>();

	protected override async Task OnParametersSetAsync()
	{
		if (Session == null)
			return;

		var filesResponse = await Http.GetFromJsonAsync<IEnumerable<Dto.UploadedFile>>($"Session/GetSessionFiles?sessionId={Session.SessionId}");
		_files = filesResponse ?? Enumerable.Empty<Dto.UploadedFile>();
		Session.Files = _files;

		_loading = false;
		StateHasChanged();
	}

	private bool FileFilter(Dto.UploadedFile file)
	{
		if (string.IsNullOrWhiteSpace(_fileSearchString))
			return true;
		if (file.Name.Contains(_fileSearchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}

	public async Task UploadFiles() {
		var parameters = new DialogParameters { ["SessionId"] = Session!.SessionId };
		var result = await DialogService.Show<UploadSessionFilesDialog>("Upload session files", parameters).Result;
		if ((bool)(result.Data ?? false))
		{
			_loading = true;
			var filesResponse = await Http.GetFromJsonAsync<IEnumerable<Dto.UploadedFile>>($"Session/GetSessionFiles?sessionId={Session.SessionId}");
			_files = filesResponse ?? Enumerable.Empty<Dto.UploadedFile>();
			Session.Files = _files;
			_loading = false;
		}
	}

	public async Task DownloadFile(Dto.UploadedFile file) {
		await JS.InvokeVoidAsync("downloadFile", file.Name, $"{Http.BaseAddress}Session/DownloadSessionFile?fileId={file.Id}");
	}
}
