@using Concerto.Client.Components.Layout;
@using Concerto.Shared.Models.Dto
@using Concerto.Client.Services
@using Concerto.Client.Components.Input
@inject IUserService UserService
@inherits MudComponentBase

	<MudTable Comparer="_comparer" T="CourseUser" Items="Items" Loading="Loading" Filter="new Func<CourseUser, bool>(Filter)"
			  RowClassFunc="RowClassFunc" ReadOnly="true" AllowUnsorted="false"
			  RowsPerPage="25" 
			  SortLabel="Sort By" Dense="true" Hover="true"  Outlined="true" FixedFooter="true" FixedHeader="true"
			  Height="100%" Class="@Class" Style="@TableStyle">

		<ToolBarContent>
			<MudText Typo="Typo.subtitle1">Users</MudText>
			<MudSpacer/>
			<MudSwitch Disabled="Editing" Class="ml-2" @bind-Checked="@_showMembersOnly" Color="Color.Primary">Show only members</MudSwitch>
			<MudSpacer/>
			<MudTextField Clearable="true" @bind-Value="_searchString" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="ma-0"></MudTextField>
		</ToolBarContent>

		<ColGroup>
			@if (LayoutState.Xs)
			{
				<col />
			}
			else
			{
				<col style="padding: 0; width: 20px" />
				<col style="width: 50px" />
			}
			<col style="min-width: 100px" />
			<col style="min-width: 100px" />
			<col style="min-width: 100px" />
			<col style="min-width: 230px" />
			<col style="min-width: 90px" />
		</ColGroup>

		<HeaderContent>
			@if (!LayoutState.Xs)
			{
				<MudTh>
					<MudCheckBox T="bool?" Dense="true" Disabled="Editing" CheckedChanged="SelectAllClicked" Checked="_selectAllState" />
				</MudTh>
			}

			<MudTh Style="padding-right: 0">
				<MudTableSortLabel SortBy="new Func<CourseUser, object>(x => SelectedCourseUsers.Contains(x))">Member</MudTableSortLabel>
			</MudTh>
			<MudTh>
				<MudTableSortLabel SortBy="new Func<CourseUser, object>(x => Users[x.UserId].FirstName)">Name</MudTableSortLabel>
			</MudTh>
			<MudTh>
				<MudTableSortLabel SortBy="new Func<CourseUser, object>(x => Users[x.UserId].LastName)" InitialDirection="SortDirection.Ascending">Surname</MudTableSortLabel>
			</MudTh>
			<MudTh>
				<MudTableSortLabel SortBy="new Func<CourseUser, object>(x => Users[x.UserId].Username)">Username</MudTableSortLabel>
			</MudTh>
			<MudTh>
				<MudTableSortLabel SortBy="new Func<CourseUser, object>(x => SelectedCourseUsers.Contains(x) ? x.Role.ToDisplayString() : string.Empty)">Role</MudTableSortLabel>
			</MudTh>
			<MudTh>Actions</MudTh>
		</HeaderContent>
		
		<RowTemplate>
			<MudTd DataLabel="Member">
				<MudCheckBox Class="py-2" T="bool" CheckedChanged="() => CheckedChanged(context)" Dense="true" Disabled="Editing" Checked="@SelectedCourseUsers.Contains(context)" />
			</MudTd>
			@if(!LayoutState.Xs)
			{
				<MudTd DataLabel="Member">←</MudTd>
			}
			<MudTd DataLabel="Name">@Users[context.UserId].FirstName</MudTd>
			<MudTd DataLabel="Surname">@Users[context.UserId].LastName</MudTd>
			<MudTd DataLabel="Username">@Users[context.UserId].Username</MudTd>

			@if (_editedUser?.UserId == context.UserId)
			{

				<MudTd DataLabel="Role" Style="min-width: 200px;">
					<CourseRolePicker @bind-Value="context.Role" />
				</MudTd>

			<MudTd  DataLabel="Actions">
					<MudIconButton Size="Size.Small" Icon="@Icons.Filled.Check" OnClick="ApplyEdit" />
					<MudIconButton Size="Size.Small" Icon="@Icons.Filled.Cancel" OnClick="CancelEdit" />
			</MudTd>
			}
			else
			{
				@if (SelectedCourseUsers.Contains(context))
				{
				<MudTd DataLabel="Role" Style="min-width: 200px;">
							@context.Role.ToDisplayString()
					</MudTd>


					<MudTd Class="d-flex" DataLabel="Actions">
						<MudIconButton Size="Size.Small" Icon="@Icons.Filled.Edit" OnClick="() => _editedUser = context" />
						@if (IsModified(context))
						{
							<MudIconButton Disabled="Editing" Size="Size.Small" Icon="@Icons.Filled.Restore" OnClick="() => RestoreUser(context)" />
						}
					</MudTd>

				}
				else
				{
					<MudTd DataLabel="Role" Style="min-width: 200px;">-</MudTd>
					<MudTd DataLabel="Actions" />
				}
			}

		</RowTemplate>

		<FooterContent>
			<MudTd DataLabel="">
				<MudCheckBox T="bool?" Dense="true" Disabled="Editing" CheckedChanged="SelectAllClicked" Checked="_selectAllState" />
			</MudTd>
			<MudTd colspan="1">Select All</MudTd>
			<MudTd colspan="5">
				Legend:
				<MudButton Style="pointer-events: none;" DisableElevation="true" Size="Size.Small" Variant="Variant.Filled" Class="row-colored row-new">New</MudButton>
				<MudButton Style="pointer-events: none;" DisableElevation="true" Size="Size.Small" Variant="Variant.Filled" Class="row-colored row-modified">Modified</MudButton>
				<MudButton Style="pointer-events: none;" DisableElevation="true" Size="Size.Small" Variant="Variant.Filled" Class="row-colored row-deleted">Deleted</MudButton>
				<MudButton Style="pointer-events: none;" DisableElevation="true" Size="Size.Small" Variant="Variant.Filled" Class="row-colored row-edited">Editing</MudButton>
			</MudTd>
		</FooterContent>

		<PagerContent>
			<MudTablePager Style="" Class=""  PageSizeOptions="new[] { 25, 50, 100 }"/>
		</PagerContent>

	</MudTable>

@code
{
	[CascadingParameter] LayoutState LayoutState { get; set; } = new();

	private HashSet<CourseUser> _selectedCourseUsers = null!;

	[Parameter]
	public HashSet<CourseUser> SelectedCourseUsers { get; set; } = new(new CourseUserIdEqualityComparer());

	[Parameter]
	public EventCallback<HashSet<CourseUser>> SelectedCourseUsersChanged { get; set; }

	[Parameter]
	public HashSet<CourseUser> ExistingCourseUsers { get; set; } = null!;

	[Parameter]
	public HashSet<CourseUser> AvailableCourseUsers { get; set; } = null!;

	[Parameter]
	public Dictionary<long, User> Users { get; set; } = null!;

	string TableStyle => LayoutState.Xs
	? $"display:grid; grid-template-rows: min-content min-content 1fr min-content; {Style}"
	: $"display:grid; grid-template-rows: min-content 1fr min-content; {Style}";


	Size Size => LayoutState.Xs ? Size.Small : Size.Medium;


	private bool? _selectAllState => SelectedCourseUsers.Count == Items.Count() ? true : SelectedCourseUsers.Count > 0 ? null : false;

	bool Loading => AvailableCourseUsers is null || Users is null;

	IEnumerable<CourseUser> CurrentMembers => AvailableCourseUsers.Where(x => ExistingCourseUsers.Contains(x) || SelectedCourseUsers.Contains(x));
	IEnumerable<CourseUser> Items => Loading ? new HashSet<CourseUser>() : _showMembersOnly ? CurrentMembers : AvailableCourseUsers;

	private string _searchString = "";
	bool _showMembersOnly = true;

	private CourseUser? _editedUser;
	bool Editing => _editedUser is not null;

	private CourseUserIdEqualityComparer _comparer = new();

	private void ApplyEdit()
	{
		_editedUser = null;
		SelectedCourseUsersChanged.InvokeAsync().AndForget();
		StateHasChanged();
	}

	private void CancelEdit()
	{
		if (_editedUser is not null)
		{
			RestoreUser(_editedUser);
			_editedUser = null;
		}

	}

	private void RestoreUser(CourseUser user)
	{
		CourseUser? existingUser;
		var existing = ExistingCourseUsers.TryGetValue(user, out existingUser);
		if (existing && existingUser is not null)
		{
			user.Role = existingUser.Role;
			SelectedCourseUsersChanged.InvokeAsync().AndForget();
			StateHasChanged();
		}
	}


	private void SelectAllClicked()
	{
		switch(_selectAllState)
		{
			case true:
			case null:
				SelectedCourseUsers.ExceptWith(Items);
				break;
			case false:
				SelectedCourseUsers.UnionWith(Items.Where(x => Filter(x)).ToHashSet(new CourseUserIdEqualityComparer()));
				break;
		}
		SelectedCourseUsersChanged.InvokeAsync().AndForget();
		StateHasChanged();
	}

	private void CheckedChanged(CourseUser user)
	{
		if (SelectedCourseUsers.Contains(user)) SelectedCourseUsers.Remove(user);
		else SelectedCourseUsers.Add(user);
		SelectedCourseUsersChanged.InvokeAsync().AndForget();
	}


	private bool Filter(CourseUser user)
	{
		if (string.IsNullOrWhiteSpace(_searchString))
			return true;
		if (Users[user.UserId].FirstName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (Users[user.UserId].LastName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (Users[user.UserId].FullName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (Users[user.UserId].Username.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (user.Role.ToDisplayString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;

		return false;
	}

	private bool IsModified(CourseUser courseUser)
	{
		CourseUser? existingCourseUser;
		var existing = ExistingCourseUsers.TryGetValue(courseUser, out existingCourseUser);
		if(existing && existingCourseUser is not null)
		{
			return existingCourseUser.Role != courseUser.Role;
		}
		return false;
	}

	private string RowClassFunc(CourseUser courseUser, int rowNumber)
	{
		if (ExistingCourseUsers is null)
			return string.Empty;

		if (_editedUser?.UserId == courseUser.UserId)
		{
			return "row-colored row-edited";
		}

		CourseUser? existingCourseUser;
		var existing = ExistingCourseUsers.TryGetValue(courseUser, out existingCourseUser);
		var selected = SelectedCourseUsers.Contains(courseUser);

		if (selected && existing)
		{
			if (existingCourseUser!.Role != courseUser.Role) return "row-colored row-modified"; // Modified
			return string.Empty; // Unchanged}
		}
		if (selected && !existing) return "row-colored row-new"; // New
		if (!selected && existing) return "row-colored row-deleted"; // Deleted

		return string.Empty;
	}
}