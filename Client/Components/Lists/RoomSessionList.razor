@using Concerto.Client.Components.Dialogs
@using Concerto.Client.Services
@inherits MudComponentBase;
@inject IDialogService DialogService
@inject IUserService UserService
@inject HttpClient Http;

<MudTable Items="_sessions" Hover="true" Elevation="0" FixedHeader="true" FixedFooter="true" Height="calc(100% - 15px)" Loading="@_loading" Class="@Class" Style="@Style">
	<ToolBarContent>
		<MudText Class="mr-2" Typo="Typo.h6">Sessions</MudText>
		<MudSpacer />
		@if (!_loading && !_sessions.Any())
		{
			<MudSpacer />
			<MudAlert Severity="Severity.Info">This course has no sessions yet.</MudAlert>
		}
		@if (Course?.OwnerId == UserService.UserId)
		{
			<MudIconButton Class="ml-2" Size="Size.Large" Icon="@Icons.Material.Sharp.Add" Color="Color.Primary" Variant="Variant.Outlined" OnClick="CreateSession" />
		}
	</ToolBarContent>
	<HeaderContent>
		<MudTh>Name</MudTh>
		<MudTh>Sheduled on</MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd>
			<MudIconButton Class="mr-2" Icon="@Icons.Filled.Group" Color="Color.Primary" Variant="Variant.Outlined" OnClick="@(() => SelectSession(@context))" />
				@context.Name
			</MudTd>
		<MudTd>@context.ScheduledDateTime.ToString()</MudTd>
	</RowTemplate>
</MudTable>

@code
{
	[Parameter]
	public Dto.Course? Course { get; set; }
	[Parameter]
	public EventCallback<Dto.Session> OnSessionSelected { get; set; }

	private bool _loading = true;
	private IEnumerable<Dto.Session> _sessions = Enumerable.Empty<Dto.Session>();

	private void SelectSession(Dto.Session session)
	{
		OnSessionSelected.InvokeAsync(session).Wait();
	}

	protected override void OnParametersSet()
	{
		_sessions = Course?.Sessions ?? Enumerable.Empty<Dto.Session>();
		_loading = Course?.Sessions == null;
		StateHasChanged();
	}

	private async Task CreateSession(MouseEventArgs mouseEventArgs)
	{
		var parameters = new DialogParameters { ["CourseId"] = Course!.Id };
		var result = await DialogService.Show<CreateSessionDialog>("Create new session", parameters).Result;
		if ((bool)(result.Data ?? false))
		{
			_loading = true;
			var course = await Http.GetFromJsonAsync<Dto.Course?>($"Course/GetCourse?courseId={Course.Id}");
			Course.Sessions = course?.Sessions ?? Enumerable.Empty<Dto.Session>();
			_sessions = Course?.Sessions ?? Enumerable.Empty<Dto.Session>();
			_loading = Course?.Sessions == null;
		}
	}

}