@using Concerto.Client.Components.Dialogs
@inject IDialogService DialogService
@inject HttpClient Http;

<MudPaper Class="flex-grow-0 border-solid border-2 mud-border-primary pa-4 ma-2" Elevation="0">
	<MudTable Items="_sessions" Hover="true" Elevation="0" Loading="@_loading">
		<ToolBarContent>
			<MudText Typo="Typo.h6">Sessions</MudText>
			<MudSpacer />
			<MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="CreateSession">Create session</MudButton>
			@if (!_loading && !_sessions.Any())
			{
				<MudSpacer />
				<MudAlert Severity="Severity.Info">This room has no sessions yet.</MudAlert>
			}
		</ToolBarContent>
		<HeaderContent>
			<MudTh>Name</MudTh>
			<MudTh>Sheduled on</MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd>@context.Name</MudTd>
			<MudTd>@context.ScheduledDateTime.ToString()</MudTd>
			<MudTd Style="text-align:right">
				<MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="@(() => SelectSession(@context))">Open</MudButton>
			</MudTd>
		</RowTemplate>
		<PagerContent>
			<MudTablePager PageSizeOptions="new int[]{50, 100}" />
		</PagerContent>
	</MudTable>
</MudPaper>

@code
{
	[Parameter]
	public Dto.Room? Room { get; set; }
	[Parameter]
	public EventCallback<Dto.Session> OnSessionSelected { get; set; }

	private bool _loading = true;
	private IEnumerable<Dto.Session> _sessions = Enumerable.Empty<Dto.Session>();

	private void SelectSession(Dto.Session session)
	{
		OnSessionSelected.InvokeAsync(session).Wait();
	}

	protected override void OnParametersSet()
	{
		_sessions = Room?.Sessions ?? Enumerable.Empty<Dto.Session>();
		_loading = Room?.Sessions == null;
		StateHasChanged();
	}

	private async Task CreateSession(MouseEventArgs mouseEventArgs)
	{
		var parameters = new DialogParameters { ["RoomId"] = Room!.Id };
		var result = await DialogService.Show<CreateSessionDialog>("Create new session", parameters).Result;
		if ((bool)(result.Data ?? false))
		{
			_loading = true;
			var room = await Http.GetFromJsonAsync<Dto.Room?>($"Room/GetRoom?roomId={Room.Id}");
			Room.Sessions = room?.Sessions ?? Enumerable.Empty<Dto.Session>();
			_sessions = Room?.Sessions ?? Enumerable.Empty<Dto.Session>();
			_loading = Room?.Sessions == null;
		}
	}

}