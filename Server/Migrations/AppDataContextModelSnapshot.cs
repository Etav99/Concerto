// <auto-generated />
using System;
using Concerto.Server.Data.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Concerto.Server.Migrations
{
    [DbContext(typeof(AppDataContext))]
    partial class AppDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CatalogSession", b =>
                {
                    b.Property<long>("SharedCatalogsId")
                        .HasColumnType("bigint");

                    b.Property<long>("SharedInSessionsId")
                        .HasColumnType("bigint");

                    b.HasKey("SharedCatalogsId", "SharedInSessionsId");

                    b.HasIndex("SharedInSessionsId");

                    b.ToTable("CatalogSession");
                });

            modelBuilder.Entity("CatalogUser", b =>
                {
                    b.Property<long>("CatalogsSharedToId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersSharedToId")
                        .HasColumnType("bigint");

                    b.HasKey("CatalogsSharedToId", "UsersSharedToId");

                    b.HasIndex("UsersSharedToId");

                    b.ToTable("CatalogUser", (string)null);
                });

            modelBuilder.Entity("Concerto.Server.Data.Models.Catalog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Catalogs");
                });

            modelBuilder.Entity("Concerto.Server.Data.Models.ChatMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ConversationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SendTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessages");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Content = "Test message 1",
                            ConversationId = 1L,
                            SendTimestamp = new DateTime(2022, 10, 10, 17, 11, 28, 18, DateTimeKind.Utc).AddTicks(7480),
                            SenderId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Content = "Test message 2",
                            ConversationId = 1L,
                            SendTimestamp = new DateTime(2022, 10, 10, 17, 13, 28, 18, DateTimeKind.Utc).AddTicks(7483),
                            SenderId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            Content = "Test reply 1",
                            ConversationId = 1L,
                            SendTimestamp = new DateTime(2022, 10, 10, 17, 14, 28, 18, DateTimeKind.Utc).AddTicks(7484),
                            SenderId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            Content = "Test reply 2",
                            ConversationId = 1L,
                            SendTimestamp = new DateTime(2022, 10, 10, 17, 15, 28, 18, DateTimeKind.Utc).AddTicks(7485),
                            SenderId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            Content = "Test message 3",
                            ConversationId = 1L,
                            SendTimestamp = new DateTime(2022, 10, 10, 17, 15, 28, 18, DateTimeKind.Utc).AddTicks(7486),
                            SenderId = 1L
                        });
                });

            modelBuilder.Entity("Concerto.Server.Data.Models.Contact", b =>
                {
                    b.Property<long>("User1Id")
                        .HasColumnType("bigint");

                    b.Property<long>("User2Id")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("User1Id", "User2Id");

                    b.HasIndex("User2Id");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            User1Id = 1L,
                            User2Id = 2L,
                            Status = 1
                        },
                        new
                        {
                            User1Id = 1L,
                            User2Id = 3L,
                            Status = 1
                        },
                        new
                        {
                            User1Id = 1L,
                            User2Id = 4L,
                            Status = 1
                        },
                        new
                        {
                            User1Id = 2L,
                            User2Id = 3L,
                            Status = 1
                        },
                        new
                        {
                            User1Id = 2L,
                            User2Id = 4L,
                            Status = 1
                        },
                        new
                        {
                            User1Id = 3L,
                            User2Id = 4L,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Concerto.Server.Data.Models.Conversation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Conversations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsPrivate = true
                        },
                        new
                        {
                            Id = 2L,
                            IsPrivate = true
                        },
                        new
                        {
                            Id = 3L,
                            IsPrivate = true
                        },
                        new
                        {
                            Id = 4L,
                            IsPrivate = true
                        },
                        new
                        {
                            Id = 5L,
                            IsPrivate = true
                        },
                        new
                        {
                            Id = 6L,
                            IsPrivate = true
                        },
                        new
                        {
                            Id = 7L,
                            IsPrivate = false
                        },
                        new
                        {
                            Id = 8L,
                            IsPrivate = false
                        });
                });

            modelBuilder.Entity("Concerto.Server.Data.Models.ConversationUser", b =>
                {
                    b.Property<long>("ConversationId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("ConversationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ConversationUser");

                    b.HasData(
                        new
                        {
                            ConversationId = 1L,
                            UserId = 1L
                        },
                        new
                        {
                            ConversationId = 1L,
                            UserId = 2L
                        },
                        new
                        {
                            ConversationId = 2L,
                            UserId = 1L
                        },
                        new
                        {
                            ConversationId = 2L,
                            UserId = 3L
                        },
                        new
                        {
                            ConversationId = 3L,
                            UserId = 1L
                        },
                        new
                        {
                            ConversationId = 3L,
                            UserId = 4L
                        },
                        new
                        {
                            ConversationId = 4L,
                            UserId = 2L
                        },
                        new
                        {
                            ConversationId = 4L,
                            UserId = 3L
                        },
                        new
                        {
                            ConversationId = 5L,
                            UserId = 2L
                        },
                        new
                        {
                            ConversationId = 5L,
                            UserId = 4L
                        },
                        new
                        {
                            ConversationId = 6L,
                            UserId = 3L
                        },
                        new
                        {
                            ConversationId = 6L,
                            UserId = 4L
                        },
                        new
                        {
                            ConversationId = 7L,
                            UserId = 1L
                        },
                        new
                        {
                            ConversationId = 7L,
                            UserId = 2L
                        },
                        new
                        {
                            ConversationId = 7L,
                            UserId = 3L
                        },
                        new
                        {
                            ConversationId = 8L,
                            UserId = 1L
                        },
                        new
                        {
                            ConversationId = 8L,
                            UserId = 4L
                        });
                });

            modelBuilder.Entity("Concerto.Server.Data.Models.Room", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ConversationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ConversationId = 7L,
                            Name = "Room 1"
                        },
                        new
                        {
                            Id = 2L,
                            ConversationId = 8L,
                            Name = "Room 2"
                        });
                });

            modelBuilder.Entity("Concerto.Server.Data.Models.RoomUser", b =>
                {
                    b.Property<long>("RoomId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("RoomId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RoomUsers");

                    b.HasData(
                        new
                        {
                            RoomId = 1L,
                            UserId = 1L,
                            Role = 0
                        },
                        new
                        {
                            RoomId = 1L,
                            UserId = 2L,
                            Role = 0
                        },
                        new
                        {
                            RoomId = 1L,
                            UserId = 3L,
                            Role = 0
                        },
                        new
                        {
                            RoomId = 2L,
                            UserId = 1L,
                            Role = 0
                        },
                        new
                        {
                            RoomId = 2L,
                            UserId = 4L,
                            Role = 0
                        });
                });

            modelBuilder.Entity("Concerto.Server.Data.Models.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ConversationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RoomId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("RoomId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Concerto.Server.Data.Models.UploadedFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CatalogId")
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<string>("StorageName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.HasIndex("SessionId");

                    b.ToTable("UploadedFiles");
                });

            modelBuilder.Entity("Concerto.Server.Data.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            FirstName = "Jan",
                            LastName = "Administracyjny",
                            SubjectId = new Guid("95f418ac-e38f-41ec-a2ad-828bdd3895d0"),
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2L,
                            FirstName = "Piotr",
                            LastName = "Testowy",
                            SubjectId = new Guid("954af482-22dd-483f-ac99-975144f85a04"),
                            Username = "user2"
                        },
                        new
                        {
                            Id = 3L,
                            FirstName = "Jacek",
                            LastName = "Testowy",
                            SubjectId = new Guid("c786cbc3-9924-410f-bcdb-75a2469107be"),
                            Username = "user3"
                        },
                        new
                        {
                            Id = 4L,
                            FirstName = "John",
                            LastName = "Smith",
                            SubjectId = new Guid("f2c0a648-82bb-44a9-908e-8006577cb276"),
                            Username = "user4"
                        });
                });

            modelBuilder.Entity("CatalogSession", b =>
                {
                    b.HasOne("Concerto.Server.Data.Models.Catalog", null)
                        .WithMany()
                        .HasForeignKey("SharedCatalogsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Concerto.Server.Data.Models.Session", null)
                        .WithMany()
                        .HasForeignKey("SharedInSessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CatalogUser", b =>
                {
                    b.HasOne("Concerto.Server.Data.Models.Catalog", null)
                        .WithMany()
                        .HasForeignKey("CatalogsSharedToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Concerto.Server.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersSharedToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Concerto.Server.Data.Models.Catalog", b =>
                {
                    b.HasOne("Concerto.Server.Data.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Concerto.Server.Data.Models.ChatMessage", b =>
                {
                    b.HasOne("Concerto.Server.Data.Models.Conversation", "Conversation")
                        .WithMany("ChatMessages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Concerto.Server.Data.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Concerto.Server.Data.Models.Contact", b =>
                {
                    b.HasOne("Concerto.Server.Data.Models.User", "User1")
                        .WithMany("InvitedContacts")
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Concerto.Server.Data.Models.User", "User2")
                        .WithMany("InvitingContacts")
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Concerto.Server.Data.Models.ConversationUser", b =>
                {
                    b.HasOne("Concerto.Server.Data.Models.Conversation", "Conversation")
                        .WithMany("ConversationUsers")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Concerto.Server.Data.Models.User", "User")
                        .WithMany("ConversationsUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Concerto.Server.Data.Models.Room", b =>
                {
                    b.HasOne("Concerto.Server.Data.Models.Conversation", "Conversation")
                        .WithMany()
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("Concerto.Server.Data.Models.RoomUser", b =>
                {
                    b.HasOne("Concerto.Server.Data.Models.Room", "Room")
                        .WithMany("RoomUsers")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Concerto.Server.Data.Models.User", "User")
                        .WithMany("RoomsUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Concerto.Server.Data.Models.Session", b =>
                {
                    b.HasOne("Concerto.Server.Data.Models.Conversation", "Conversation")
                        .WithMany()
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Concerto.Server.Data.Models.Room", "Room")
                        .WithMany("Sessions")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Concerto.Server.Data.Models.UploadedFile", b =>
                {
                    b.HasOne("Concerto.Server.Data.Models.Catalog", "Catalog")
                        .WithMany("Files")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Concerto.Server.Data.Models.Session", null)
                        .WithMany("Files")
                        .HasForeignKey("SessionId");

                    b.Navigation("Catalog");
                });

            modelBuilder.Entity("Concerto.Server.Data.Models.Catalog", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Concerto.Server.Data.Models.Conversation", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("ConversationUsers");
                });

            modelBuilder.Entity("Concerto.Server.Data.Models.Room", b =>
                {
                    b.Navigation("RoomUsers");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Concerto.Server.Data.Models.Session", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Concerto.Server.Data.Models.User", b =>
                {
                    b.Navigation("ConversationsUser");

                    b.Navigation("InvitedContacts");

                    b.Navigation("InvitingContacts");

                    b.Navigation("RoomsUser");
                });
#pragma warning restore 612, 618
        }
    }
}
